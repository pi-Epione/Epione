<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Modern web applications on OpenShift: Part 2 — Using chained builds</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/44FW6timNqM/" /><category term="angular" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="nodejs" scheme="searchisko:content:tags" /><category term="react" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="s2i" scheme="searchisko:content:tags" /><category term="source-to-image" scheme="searchisko:content:tags" /><author><name>Lucas Holmquist</name></author><id>searchisko:content:id:jbossorg_blog-modern_web_applications_on_openshift_part_2_using_chained_builds</id><updated>2018-10-23T15:00:16Z</updated><published>2018-10-23T15:00:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;In the previous post&lt;/a&gt;, we took a quick look at a new source-to-image (S2I) builder image designed for building and deploying modern web applications on &lt;a href="http://openshift.com/"&gt;OpenShift&lt;/a&gt;. While the last post was focused on getting your app deployed quickly, this post will look at how to use the S2I image as a &amp;#8220;pure&amp;#8221; builder image and combine it with an OpenShift c&lt;em&gt;hained build&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-522057"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Pure builder image&lt;/h2&gt; &lt;p&gt;As mentioned in the previous post, most modern web apps now have a build step. Common workflows done in the build step are things like transpiling your code, concatenating multiple files, and minifying. Once these workflows are done, the resulting files, which are static HTML, JavaScript, and CSS, are put into an output folder. The location of the folder usually depends on the build tools you are using, but for something like React, the location is &lt;code&gt;./build&lt;/code&gt; (more on this location in a minute).&lt;/p&gt; &lt;h3&gt;Source-to-Image (S2I)&lt;/h3&gt; &lt;p&gt;This post isn&amp;#8217;t going to go into the &amp;#8220;what and how&amp;#8221; of S2I; you can &lt;a href="https://docs.okd.io/latest/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;read more here&lt;/a&gt;, but we should understand two of the phases that happen in order to better understand what the Web App Builder image is doing.&lt;/p&gt; &lt;h4&gt;Assemble phase&lt;/h4&gt; &lt;p&gt;The assemble phase is very similar to what happens when running &lt;code&gt;docker build&lt;/code&gt;. The result of this phase will be a new Docker image. This phase also happens when a build is run on OpenShift.&lt;/p&gt; &lt;p&gt;For the Web App Builder image, the &lt;a href="https://github.com/bucharest-gold/centos7-s2i-web-app/blob/master/s2i/assemble#L47"&gt;assemble script&lt;/a&gt; is responsible for installing your app&amp;#8217;s dependencies and running your build. By default, the builder image will use &lt;code&gt;npm run build&lt;/code&gt;, but that can be overridden by providing an &lt;code&gt;NPM_BUILD&lt;/code&gt; environment variable.&lt;/p&gt; &lt;p&gt;As I said before, the location of your &amp;#8220;built&amp;#8221; app depends on the build tools you are using. For example, React uses &lt;code&gt;./build&lt;/code&gt;, but an Angular app uses &lt;code&gt;project_name/dist&lt;/code&gt;. And, as you saw in the previous post, this output directory, which defaults to &lt;code&gt;build&lt;/code&gt;, can be overridden using the &lt;code&gt;OUTPUT_DIR&lt;/code&gt; environment variable. Since there are differences in output locations between frameworks, you copy the generated output into a common directory inside the image, &lt;code&gt;/opt/apt-root/output&lt;/code&gt;. This will be important further down this post, but first let&amp;#8217;s take a quick look at the next phase, the run phase.&lt;/p&gt; &lt;h4&gt;Run phase&lt;/h4&gt; &lt;p&gt;This phase is run when &lt;code&gt;docker run&lt;/code&gt; is called on the newly created image from the assemble phase. This is also what is run during an OpenShift deployment. By default, the &lt;a href="https://github.com/bucharest-gold/centos7-s2i-web-app/blob/master/s2i/run"&gt;run script&lt;/a&gt; will use the &lt;a href="https://www.npmjs.com/package/serve"&gt;serve module&lt;/a&gt; to serve the static content located in the common output directory mentioned above.&lt;/p&gt; &lt;p&gt;While this works for getting your app deployed quickly, it is not really the recommended way of serving static content. Since we are really serving only static content, we don&amp;#8217;t really even need Node.js installed in our image. We just need a web server.&lt;/p&gt; &lt;p&gt;This situation—where our building needs are different from our runtime needs—is where chained builds can help.&lt;/p&gt; &lt;h2&gt;Chained builds&lt;/h2&gt; &lt;p&gt;To quote the official OpenShift documentation on &lt;a href="https://docs.okd.io/latest/dev_guide/builds/advanced_build_operations.html#dev-guide-chaining-builds"&gt;chained builds&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&amp;#8220;Two builds can be chained together: one that produces the compiled artifact, and a second build that places that artifact in a separate image that runs the artifact.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;What this means is that we can use the Web App Builder image to run our build, and then we can use a web server image, like NGINX, to serve our content.&lt;/p&gt; &lt;p&gt;This allows us to use the Web App Builder image as a &amp;#8220;pure&amp;#8221; builder and also keep our runtime image small.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s take a look at an example to see how this all comes together.&lt;/p&gt; &lt;p&gt;This &lt;a href="https://github.com/lholmquist/react-web-app"&gt;example app&lt;/a&gt;, is a basic React application created using the &lt;code&gt;create-react-app&lt;/code&gt; CLI tool.&lt;/p&gt; &lt;p&gt;I&amp;#8217;ve added an &lt;a href="https://github.com/lholmquist/react-web-app/blob/master/.openshiftio/application.yaml"&gt;OpenShift template file&lt;/a&gt; to piece everything together.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s take a look at some of the more important parts of this file.&lt;/p&gt; &lt;pre&gt;parameters: - name: SOURCE_REPOSITORY_URL description: The source URL for the application displayName: Source URL required: true - name: SOURCE_REPOSITORY_REF description: The branch name for the application displayName: Source Branch value: master required: true - name: SOURCE_REPOSITORY_DIR description: The location within the source repo of the application displayName: Source Directory value: . required: true - name: OUTPUT_DIR description: The location of the compiled static files from your web apps builder displayName: Output Directory value: build required: false &lt;/pre&gt; &lt;p&gt;The parameter section should be pretty self-explanatory, but I want to call out the &lt;code&gt;OUTPUT_DIR&lt;/code&gt; parameter. For our React example, we don&amp;#8217;t need to worry about it, since the default value is what React uses, but if you are using Angular or something else, you could change it.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the image streams.&lt;/p&gt; &lt;pre&gt;- apiVersion: v1 kind: ImageStream metadata: name: react-web-app-builder // 1 spec: {} - apiVersion: v1 kind: ImageStream metadata: name: react-web-app-runtime // 2 spec: {} - apiVersion: v1 kind: ImageStream metadata: name: web-app-builder-runtime // 3 spec: tags: - name: latest from: kind: DockerImage name: bucharestgold/centos7-s2i-web-app:10.x - apiVersion: v1 kind: ImageStream metadata: name: nginx-image-runtime // 4 spec: tags: - name: latest from: kind: DockerImage name: 'centos/nginx-112-centos7:latest' &lt;/pre&gt; &lt;p&gt;First, let&amp;#8217;s take a look at the third and fourth images. We can see that both are defined as Docker images, and we can see where they come from.&lt;/p&gt; &lt;p&gt;The third is the &lt;code&gt;web-app-builder&lt;/code&gt; image, &lt;code&gt;bucharestgold/centos7-s2i-web-app&lt;/code&gt;, which is using the 10.x tag from the &lt;a href="https://hub.docker.com/r/bucharestgold/centos7-s2i-web-app/"&gt;Docker hub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The fourth is an NGINX image (version 1.12) using the latest tag from the &lt;a href="https://hub.docker.com/r/centos/nginx-112-centos7/"&gt;Docker hub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s take a look at those first two images. Both images are empty to start. These images will be created during the build phase, but for completeness, let me explain what will go into each one.&lt;/p&gt; &lt;p&gt;The first image, &lt;code&gt;react-web-app-builder&lt;/code&gt;, will be the result of the &amp;#8220;assemble&amp;#8221; phase of the &lt;code&gt;web-app-builder-runtime&lt;/code&gt; image once it is combined with our source code. That is why I&amp;#8217;ve named it &amp;#8220;&lt;code&gt;-builder&lt;/code&gt;.&amp;#8221;&lt;/p&gt; &lt;p&gt;The second image, &lt;code&gt;react-web-app-runtime&lt;/code&gt;, will be the result of combining the &lt;code&gt;nginx-image-runtime&lt;/code&gt; with the some of the files from the &lt;code&gt;react-web-app-builder&lt;/code&gt; image. This image will also be the image that is &amp;#8220;deployed&amp;#8221; and will contain only the web server and the static HTML, JavaScript, and CSS for the application.&lt;/p&gt; &lt;p&gt;This might sound a little confusing now, but once we look at the build configurations, things should be a little more clear.&lt;/p&gt; &lt;p&gt;In this template, there are two build configurations. Let&amp;#8217;s take a look at them one at a time.&lt;/p&gt; &lt;pre&gt; apiVersion: v1 kind: BuildConfig metadata: name: react-web-app-builder spec: output: to: kind: ImageStreamTag name: react-web-app-builder:latest // 1 source: // 2 git: uri: ${SOURCE_REPOSITORY_URL} ref: ${SOURCE_REPOSITORY_REF} contextDir: ${SOURCE_REPOSITORY_DIR} type: Git strategy: sourceStrategy: env: - name: OUTPUT_DIR // 3 value: ${OUTPUT_DIR} from: kind: ImageStreamTag name: web-app-builder-runtime:latest // 4 incremental: true // 5 type: Source triggers: // 6 - github: secret: ${GITHUB_WEBHOOK_SECRET} type: GitHub - type: ConfigChange - imageChange: {} type: ImageChange &lt;/pre&gt; &lt;p&gt;The first one, &lt;code&gt;react-web-app-builder&lt;/code&gt; above, is pretty standard. We see that line 1 tells us the result of this build will be put into the &lt;code&gt;react-web-app-builder&lt;/code&gt; image, which we saw when we took a look at the image stream list above.&lt;/p&gt; &lt;p&gt;Next, line 2 is just telling us where the code is coming from. In this case, it is a git repository, and the location, &lt;code&gt;ref&lt;/code&gt;, and context directory are defined by the parameters we saw earlier.&lt;/p&gt; &lt;p&gt;Again, line 3, we saw in the &lt;code&gt;parameters&lt;/code&gt; section. This will add the &lt;code&gt;OUTPUT_DIR&lt;/code&gt; environment variable, which in our example will be &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Line 4 is just telling us to use the &lt;code&gt;web-app-builder-runtime&lt;/code&gt; image that we saw in the &lt;code&gt;ImageStream&lt;/code&gt; section.&lt;/p&gt; &lt;p&gt;Line 5 is saying we want to use an incremental build if the S2I image supports it. The Web App Builder image does support it. On the first run, once the assemble phase is complete, the image will save the &lt;code&gt;node_modules&lt;/code&gt; folder into an archive file. Then on subsequent runs, the image will un-archive that &lt;code&gt;node_modules&lt;/code&gt; folder, which will speed up build times.&lt;/p&gt; &lt;p&gt;The last thing to call out, line 6, is just a few triggers that are set up, so when something changes, this build can be kicked off without manual interaction.&lt;/p&gt; &lt;p&gt;As I said before, this is a pretty standard build configuration. Now let&amp;#8217;s take a look at the second build configuration. Most of it is very similar to the first, but there is one important difference:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: BuildConfig metadata: name: react-web-app-runtime spec: output: to: kind: ImageStreamTag name: react-web-app-runtime:latest // 1 source: // 2 type: Image images: - from: kind: ImageStreamTag name: react-web-app-builder:latest // 3 paths: - sourcePath: /opt/app-root/output/. // 4 destinationDir: . // 5 strategy: // 6 sourceStrategy: from: kind: ImageStreamTag name: nginx-image-runtime:latest incremental: true type: Source triggers: - github: secret: ${GITHUB_WEBHOOK_SECRET} type: GitHub - type: ConfigChange - type: ImageChange imageChange: {} - type: ImageChange imageChange: from: kind: ImageStreamTag name: react-web-app-builder:latest // 7 &lt;/pre&gt; &lt;p&gt;This second build configuration, &lt;code&gt;react-web-app-runtime&lt;/code&gt;, starts off in a fairly standard way.&lt;/p&gt; &lt;p&gt;Line 1 isn&amp;#8217;t anything new. It is telling us that the result of this build will be put into the &lt;code&gt;react-web-app-runtime&lt;/code&gt; image.&lt;/p&gt; &lt;p&gt;As with the first build configuration, we have a source section, line 2, but this time we say our source is coming from an image. The image that it is coming from is the one we just created, &lt;code&gt;react-web-app-builder&lt;/code&gt; (specified in line 3). The files we want to use are located inside the image and that location is specified in line 4: &lt;code&gt;/opt/app-root/output/&lt;/code&gt;. If you remember, this is where our generated files from our app&amp;#8217;s build step ended up.&lt;/p&gt; &lt;p&gt;The destination directory, specified in line 5, is just the current directory (this is all happening inside some magic OpenShift thing, not on your local computer).&lt;/p&gt; &lt;p&gt;The strategy section, line 6, is also similar to the first build configuration. This time, we are going to use the &lt;code&gt;nginx-image-runtime&lt;/code&gt; that we looked at in the &lt;code&gt;ImageStream&lt;/code&gt; section.&lt;/p&gt; &lt;p&gt;The final thing to point out is the trigger section, line 7, which will trigger this build anytime the &lt;code&gt;react-web-app-builder&lt;/code&gt; image changes.&lt;/p&gt; &lt;p&gt;The rest of the template is fairly standard deployment configuration, service, and route stuff, which we don&amp;#8217;t need to go into. Note that the image that will be deployed will be the &lt;code&gt;react-web-app-runtime&lt;/code&gt; image.&lt;/p&gt; &lt;h2&gt;Deploying the application&lt;/h2&gt; &lt;p&gt;Now that we&amp;#8217;ve taken a look at the template, let&amp;#8217;s see how we can easily deploy this application.&lt;/p&gt; &lt;p&gt;We can use the OpenShift Client tool &lt;code&gt;oc&lt;/code&gt; to deploy our template:&lt;/p&gt; &lt;pre&gt;$ find . | grep openshiftio | grep application | xargs -n 1 oc apply -f $ oc new-app --template react-web-app -p SOURCE_REPOSITORY_URL=https://github.com/lholmquist/react-web-app &lt;/pre&gt; &lt;p&gt;The first command above is just an overly engineered way of finding the &lt;code&gt;./openshiftio/application.yaml&lt;/code&gt; template.&lt;/p&gt; &lt;p&gt;The second creates a new application based on that template.&lt;/p&gt; &lt;p&gt;Once those commands are run, we can see that there are two builds:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-build-2.png"&gt;&lt;img class=" aligncenter wp-image-526067 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-build-2-1024x521.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-build-2-1024x521.png" alt="Screen showing the two builds" width="640" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-build-2-1024x521.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-build-2-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-build-2-768x391.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Back on the Overview screen, we should see the running pod:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-overview.png"&gt;&lt;img class=" aligncenter wp-image-526077 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-overview-1024x513.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-overview-1024x513.png" alt="Screen showing the running pod" width="640" height="321" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-overview-1024x513.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-overview-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-overview-768x385.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Clicking the link should navigate to our application, which is the default React App page:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web.png"&gt;&lt;img class=" aligncenter wp-image-526087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web-1024x487.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web-1024x487.png" alt="Screen that is displayed after navigating to the app" width="640" height="304" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web-1024x487.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web-300x143.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web-768x365.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-web-app-web.png 1326w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Extra Credit&lt;/h2&gt; &lt;p&gt;For those who are into using Angular, here is an &lt;a href="https://github.com/lholmquist/angular-web-app"&gt;example of that&lt;/a&gt;.&lt;br /&gt; The template is mostly the same, except for that &lt;code&gt;OUTPUT_DIR&lt;/code&gt; variable.&lt;/p&gt; &lt;h2&gt;Extra Extra Credit&lt;/h2&gt; &lt;p&gt;This post showed how to use the NGINX image as our web server, but it&amp;#8217;s fairly easy to swap that out if you wanted to use an Apache server. It can actually be done in one or maybe two (for completeness) steps.&lt;/p&gt; &lt;p&gt;All you need to do is in the template file, swap out the &lt;a href="https://github.com/lholmquist/react-web-app/blob/master/.openshiftio/application.yaml#L66"&gt;NGINX image&lt;/a&gt; for the &lt;a href="https://hub.docker.com/r/centos/httpd-24-centos7/"&gt;Apache image&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;While the first post in this series showed how to quickly get a modern web application on OpenShift, this post went deeper into what the Web App Builder image is doing and how to combine it, using a chained build, with a pure web server such as NGINX for a more production-ready build.&lt;/p&gt; &lt;p&gt;In the next and final (probably) post, we will take a look at how to run our web application&amp;#8217;s development server on OpenShift, while keeping our local and remote files in sync.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/books/deploying-openshift/"&gt;Deploying to OpenShift: a guide for impatient developers&lt;/a&gt; &amp;#8211; free ebook&lt;/li&gt; &lt;li&gt;Information on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;OpenShift and Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F23%2Fmodern-web-applications-on-openshift-part-2-using-chained-builds%2F&amp;#38;title=Modern%20web%20applications%20on%20OpenShift%3A%20Part%202%20%E2%80%94%20Using%20chained%20builds" data-a2a-url="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/" data-a2a-title="Modern web applications on OpenShift: Part 2 — Using chained builds"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/"&gt;Modern web applications on OpenShift: Part 2 &amp;#8212; Using chained builds&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/44FW6timNqM" height="1" width="1" alt=""/&gt;</content><summary>In the previous post, we took a quick look at a new source-to-image (S2I) builder image designed for building and deploying modern web applications on OpenShift. While the last post was focused on getting your app deployed quickly, this post will look at how to use the S2I image as a “pure” builder image and combine it with an OpenShift chained build. Pure builder image As mentioned in the previou...</summary><dc:creator>Lucas Holmquist</dc:creator><dc:date>2018-10-23T15:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/</feedburner:origLink></entry><entry><title>All Things Open 2018 - Lightning Talk on How To Jump Start a Career in Open Source (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9W0kG94qvTI/all-things-open-2018-lightning-talk-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-all_things_open_2018_lightning_talk_on_how_to_jump_start_a_career_in_open_source_slides</id><updated>2018-10-23T05:00:14Z</updated><published>2018-10-23T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;a href="https://4.bp.blogspot.com/-QbBdIvvbiMQ/W8XsxbzP5cI/AAAAAAAAtO0/0jxO5kPqfE0l00-kwZ_UKlONsJXpnjTUwCLcBGAs/s1600/Screen%2BShot%2B2018-10-16%2Bat%2B15.50.43.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="all things open" border="0" data-original-height="428" data-original-width="827" height="165" src="https://4.bp.blogspot.com/-QbBdIvvbiMQ/W8XsxbzP5cI/AAAAAAAAtO0/0jxO5kPqfE0l00-kwZ_UKlONsJXpnjTUwCLcBGAs/s320/Screen%2BShot%2B2018-10-16%2Bat%2B15.50.43.png" title="" width="320" /&gt;&lt;/a&gt;This week I was in Raleigh, North Carolina from Oct 21-23 speaking at All Things Open.&lt;br /&gt;&lt;br /&gt;I &lt;a href="http://www.schabell.org/2018/10/all-things-open-2018-lightning-talk.html" target="_blank"&gt;gave a lightning talk&lt;/a&gt; on how to jump start a career in open source, in just 6 minutes.&lt;br /&gt;&lt;br /&gt;The topic is near and dear to my heart, so as a lightning talk it was fun to promote the full session I gave earlier this Summer in one of the most amazing venues I've ever spoken at.&lt;br /&gt;&lt;br /&gt;The talk includes links to the recording of that venue and the complete story I told. The only thing missing are the slides, which you'll find here.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/2Ay6VIduPAa2XH" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt; &lt;/div&gt;&lt;br /&gt;For completeness, here is the original abstract:&lt;br /&gt;&lt;h3&gt;&lt;a href="https://opensource.com/article/18/10/lightning-talks-all-things-open#3" target="_blank"&gt;Lightning Talk - How to Jump Start a Career in Open Source&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;It's not magic. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; &lt;i&gt;Date: Tuesday, OCT 23&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Time: 12:45 PM, local time&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Room: main stage in Ballroom B on 4th floor of the Raleigh Convention Center.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;All lightning talks will be recorded for future playback on the Opensource.com YouTube channel. Live stream will not be available for this event.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Hope to &lt;a href="https://allthingsopen.org/speakers/eric-d-schabell/" target="_blank"&gt;see you there&lt;/a&gt;!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1G0dE2jmVCQ:WI4uuqZ5MBs:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1G0dE2jmVCQ:WI4uuqZ5MBs:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1G0dE2jmVCQ:WI4uuqZ5MBs:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1G0dE2jmVCQ:WI4uuqZ5MBs:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1G0dE2jmVCQ:WI4uuqZ5MBs:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/1G0dE2jmVCQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9W0kG94qvTI" height="1" width="1" alt=""/&gt;</content><summary>This week I was in Raleigh, North Carolina from Oct 21-23 speaking at All Things Open. I gave a lightning talk on how to jump start a career in open source, in just 6 minutes. The topic is near and dear to my heart, so as a lightning talk it was fun to promote the full session I gave earlier this Summer in one of the most amazing venues I've ever spoken at. The talk includes links to the recording...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-10-23T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/1G0dE2jmVCQ/all-things-open-2018-lightning-talk-slides.html</feedburner:origLink></entry><entry><title>Introduction to Linux interfaces for virtual networking</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PIiEiMOAcpc/" /><category term="bonded interface" scheme="searchisko:content:tags" /><category term="bridge" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="dummy interface" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ifb" scheme="searchisko:content:tags" /><category term="ipoib" scheme="searchisko:content:tags" /><category term="ipvlan" scheme="searchisko:content:tags" /><category term="ipvtap" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="macsec" scheme="searchisko:content:tags" /><category term="macvlan" scheme="searchisko:content:tags" /><category term="macvtap" scheme="searchisko:content:tags" /><category term="network function virtualization" scheme="searchisko:content:tags" /><category term="NFV" scheme="searchisko:content:tags" /><category term="nlmon" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="team device" scheme="searchisko:content:tags" /><category term="vcan" scheme="searchisko:content:tags" /><category term="veth" scheme="searchisko:content:tags" /><category term="virtual interface" scheme="searchisko:content:tags" /><category term="virtual networking" scheme="searchisko:content:tags" /><category term="Vlan" scheme="searchisko:content:tags" /><category term="vxcan" scheme="searchisko:content:tags" /><category term="vxlan" scheme="searchisko:content:tags" /><author><name>Hangbin Liu</name></author><id>searchisko:content:id:jbossorg_blog-introduction_to_linux_interfaces_for_virtual_networking</id><updated>2018-10-22T19:35:05Z</updated><published>2018-10-22T19:35:05Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt; has rich virtual networking capabilities that are used as basis for hosting VMs and &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt;, as well as cloud environments. In this post, I will give a brief introduction to all commonly used virtual network interface types. There is no code analysis, only a brief introduction to the interfaces and their usage on Linux. Anyone with a network background might be interested in this blog post. A list of interfaces can be obtained using the command &lt;code&gt;ip link help&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This post covers the following frequently used interfaces and some interfaces that can be easily confused with one another:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#bridge"&gt;Bridge&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#bonded"&gt;Bonded interface&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#team"&gt;Team device&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#vlan"&gt;VLAN (Virtual LAN)&lt;/a&gt;&lt;a href="#vxlan"&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#vxlan"&gt;VXLAN (Virtual eXtensible Local Area Network)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#macvlan"&gt;MACVLAN&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#ipvlan"&gt;IPVLAN&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#macvtap"&gt;MACVTAP/IPVTAP&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#macsec"&gt;MACsec (Media Access Control Security)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#veth"&gt;VETH (Virtual Ethernet)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#vcan"&gt;VCAN (Virtual CAN)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#vxcan"&gt;VXCAN (Virtual CAN tunnel)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#ipoib"&gt;IPOIB (IP-over-InfiniBand)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#nlmon"&gt;NLMON (NetLink MONitor)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#dummy"&gt;Dummy interface&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#ifb"&gt;IFB (Intermediate Functional Block)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After reading this article, you will know what these interfaces are, what&amp;#8217;s the difference between them, when to use them, and how to create them.&lt;/p&gt; &lt;p&gt;&lt;span id="more-525757"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;a name="bridge"&gt;&lt;/a&gt;Bridge&lt;/h2&gt; &lt;p&gt;A Linux bridge behaves like a network switch. It forwards packets between interfaces that are connected to it. It&amp;#8217;s usually used for forwarding packets on routers, on gateways, or between VMs and network namespaces on a host. It also supports STP, VLAN filter, and multicast snooping.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bridge.png"&gt;&lt;img class=" aligncenter wp-image-525817 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bridge.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bridge.png" alt="Bridge diagram" width="654" height="439" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bridge.png 654w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/bridge-300x201.png 300w" sizes="(max-width: 654px) 100vw, 654px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Use a bridge when you want to establish communication channels between VMs, containers, and your hosts.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a bridge:&lt;/p&gt; &lt;pre&gt;# ip link add br0 type bridge # ip link set eth0 master br0 # ip link set tap1 master br0 # ip link set tap2 master br0 # ip link set veth1 master br0 &lt;/pre&gt; &lt;p&gt;This creates a bridge device named &lt;code&gt;br0&lt;/code&gt; and sets two TAP devices (&lt;code&gt;tap1&lt;/code&gt;, &lt;code&gt;tap2&lt;/code&gt;), a VETH device (&lt;code&gt;veth1&lt;/code&gt;), and a physical device (&lt;code&gt;eth0&lt;/code&gt;) as its slaves, as shown in the diagram above.&lt;/p&gt; &lt;h2&gt;&lt;a name="bonded"&gt;&lt;/a&gt;Bonded interface&lt;/h2&gt; &lt;p&gt;The Linux bonding driver provides a method for aggregating multiple network interfaces into a single logical &amp;#8220;bonded&amp;#8221; interface. The behavior of the bonded interface depends on the mode; generally speaking, modes provide either hot standby or load balancing services.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bond.png"&gt;&lt;img class=" aligncenter wp-image-525797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bond.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bond.png" alt="Bonded interface" width="319" height="270" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/bond.png 319w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/bond-300x254.png 300w" sizes="(max-width: 319px) 100vw, 319px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Use a bonded interface when you want to increase your link speed or do a failover on your server.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a bonded interface:&lt;/p&gt; &lt;pre&gt;ip link add bond1 type bond miimon 100 mode active-backup ip link set eth0 master bond1 ip link set eth1 master bond1 &lt;/pre&gt; &lt;p&gt;This creates a bonded interface named &lt;code&gt;bond1&lt;/code&gt; with mode active-backup. For other modes, please see the &lt;a href="https://www.kernel.org/doc/Documentation/networking/bonding.txt" target="_blank" rel="noopener"&gt;kernel documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a name="team"&gt;&lt;/a&gt;Team device&lt;/h2&gt; &lt;p&gt;Similar a bonded interface, the purpose of a team device is to provide a mechanism to group multiple NICs (ports) into one logical one (teamdev) at the L2 layer.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/team.png"&gt;&lt;img class=" aligncenter wp-image-525967 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/team.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/team.png" alt="Team device" width="322" height="273" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/team.png 322w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/team-300x254.png 300w" sizes="(max-width: 322px) 100vw, 322px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The main thing to realize is that a team device is not trying to replicate or mimic a bonded interface. What it does is to solve the same problem using a different approach, using, for example, a lockless (RCU) TX/RX path and modular design.&lt;/p&gt; &lt;p&gt;But there are also some functional differences between a bonded interface and a team. For example, a team supports LACP load-balancing, NS/NA (IPV6) link monitoring, D-Bus interface, etc., which are absent in bonding. For further details about the differences between bonding and team, see &lt;a href="https://github.com/jpirko/libteam/wiki/Bonding-vs.-Team-features" target="_blank" rel="noopener"&gt;Bonding vs. Team features&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use a team when you want to use some features that bonding doesn&amp;#8217;t provide.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a team:&lt;/p&gt; &lt;pre&gt;# teamd -o -n -U -d -t team0 -c '{"runner": {"name": "activebackup"},"link_watch": {"name": "ethtool"}}' # ip link set eth0 down # ip link set eth1 down # teamdctl team0 port add eth0 # teamdctl team0 port add eth1 &lt;/pre&gt; &lt;p&gt;This creates a team interface named &lt;code&gt;team0&lt;/code&gt; with mode &lt;code&gt;active-backup&lt;/code&gt;, and it adds &lt;code&gt;eth0&lt;/code&gt; and &lt;code&gt;eth1&lt;/code&gt; as &lt;code&gt;team0&lt;/code&gt;&amp;#8216;s sub-interfaces.&lt;/p&gt; &lt;p&gt;A new driver called &lt;a href="https://www.kernel.org/doc/html/latest/networking/net_failover.html" target="_blank" rel="noopener"&gt;net_failover&lt;/a&gt; has been added to Linux recently. It&amp;#8217;s another failover master net device for virtualization and manages a primary (&lt;a href="https://wiki.libvirt.org/page/Networking#PCI_Passthrough_of_host_network_devices" target="_blank" rel="noopener"&gt;passthru/VF [Virtual Function]&lt;/a&gt; device) slave net device and a standby (the original paravirtual interface) slave net device.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/net_failover.png"&gt;&lt;img class=" aligncenter wp-image-525957 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/net_failover.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/net_failover.png" alt="Net_failover driver" width="424" height="358" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/net_failover.png 424w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/net_failover-300x253.png 300w" sizes="(max-width: 424px) 100vw, 424px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;&lt;a name="vlan"&gt;&lt;/a&gt;VLAN&lt;/h2&gt; &lt;p&gt;A VLAN, aka virtual LAN, separates broadcast domains by adding tags to network packets. VLANs allow network administrators to group hosts under the same switch or between different switches.&lt;/p&gt; &lt;p&gt;The VLAN header looks like:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan_01.png"&gt;&lt;img class=" aligncenter wp-image-525997 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan_01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan_01.png" alt="VLAN header" width="891" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan_01.png 891w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan_01-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan_01-768x303.png 768w" sizes="(max-width: 891px) 100vw, 891px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Use a VLAN when you want to separate subnet in VMs, namespaces, or hosts.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a VLAN:&lt;/p&gt; &lt;pre&gt;# ip link add link eth0 name eth0.2 type vlan id 2 # ip link add link eth0 name eth0.3 type vlan id 3 &lt;/pre&gt; &lt;p&gt;This adds VLAN 2 with name &lt;code&gt;eth0.2&lt;/code&gt; and VLAN 3 with name &lt;code&gt;eth0.3&lt;/code&gt;. The topology looks like this:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan.png"&gt;&lt;img class=" aligncenter wp-image-525987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan.png" alt="VLAN topology" width="283" height="282" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan.png 283w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vlan-150x150.png 150w" sizes="(max-width: 283px) 100vw, 283px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: When configuring a VLAN, you need to make sure the switch connected to the host is able to handle VLAN tags, for example, by setting the switch port to trunk mode.&lt;/p&gt; &lt;h2&gt;&lt;a name="vxlan"&gt;&lt;/a&gt;VXLAN&lt;/h2&gt; &lt;p&gt;VXLAN (Virtual eXtensible Local Area Network) is a tunneling protocol designed to solve the problem of limited VLAN IDs (4,096) in IEEE 802.1q. It is described by &lt;a href="https://tools.ietf.org/html/rfc7348" target="_blank" rel="noopener"&gt;IETF RFC 7348&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With a 24-bit segment ID, aka VXLAN Network Identifier (VNI), VXLAN allows up to 2^24 (16,777,216) virtual LANs, which is 4,096 times the VLAN capacity.&lt;/p&gt; &lt;p&gt;VXLAN encapsulates Layer 2 frames with a VXLAN header into a UDP-IP packet, which looks like this:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan_01.png"&gt;&lt;img class=" aligncenter wp-image-526017 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan_01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan_01.png" alt="VXLAN encapsulates Layer 2 frames with a VXLAN header into a UDP-IP packet" width="983" height="276" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan_01.png 983w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan_01-300x84.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan_01-768x216.png 768w" sizes="(max-width: 983px) 100vw, 983px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;VXLAN is typically deployed in data centers on virtualized hosts, which may be spread across multiple racks.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan.png"&gt;&lt;img class=" aligncenter wp-image-526007 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan.png" alt="Typical VXLAN deployment" width="813" height="301" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan.png 813w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan-300x111.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/vxlan-768x284.png 768w" sizes="(max-width: 813px) 100vw, 813px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to use VXLAN:&lt;/p&gt; &lt;pre&gt;# ip link add vx0 type vxlan id 100 local 1.1.1.1 remote 2.2.2.2 dev eth0 dstport 4789 &lt;/pre&gt; &lt;p&gt;For reference, you can read the &lt;a href="https://www.kernel.org/doc/Documentation/networking/vxlan.txt" target="_blank" rel="noopener"&gt;VXLAN kernel documentation&lt;/a&gt; or &lt;a href="https://vincent.bernat.ch/en/blog/2017-vxlan-linux" target="_blank" rel="noopener"&gt;this VXLAN introduction&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a name="macvlan"&gt;&lt;/a&gt;MACVLAN&lt;/h2&gt; &lt;p&gt;With VLAN, you can create multiple interfaces on top of a single one and filter packages based on a VLAN tag. With MACVLAN, you can create multiple interfaces with different Layer 2 (that is, Ethernet MAC) addresses on top of a single one.&lt;/p&gt; &lt;p&gt;Before MACVLAN, if you wanted to connect to physical network from a VM or namespace, you would have needed to create TAP/VETH devices and attach one side to a bridge and attach a physical interface to the bridge on the host at the same time, as shown below.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/br_ns.png"&gt;&lt;img class=" aligncenter wp-image-525827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/br_ns.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/br_ns.png" alt="Configuration before MACVLAN" width="436" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/br_ns.png 436w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/br_ns-300x259.png 300w" sizes="(max-width: 436px) 100vw, 436px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now, with MACVLAN, you can bind a physical interface that is associated with a MACVLAN directly to namespaces, without the need for a bridge.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan.png"&gt;&lt;img class=" aligncenter wp-image-525897 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan.png" alt="Configuration with MACVLAN" width="439" height="372" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan.png 439w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan-300x254.png 300w" sizes="(max-width: 439px) 100vw, 439px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;There are five MACVLAN types:&lt;/p&gt; &lt;p&gt;1. Private: doesn&amp;#8217;t allow communication between MACVLAN instances on the same physical interface, even if the external switch supports hairpin mode.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_01.png"&gt;&lt;img class=" aligncenter wp-image-525907 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_01.png" alt="Private MACVLAN configuration" width="428" height="367" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_01.png 428w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_01-300x257.png 300w" sizes="(max-width: 428px) 100vw, 428px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;2. VEPA: data from one MACVLAN instance to the other on the same physical interface is transmitted over the physical interface. Either the attached switch needs to support hairpin mode or there must be a TCP/IP router forwarding the packets in order to allow communication.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_02.png"&gt;&lt;img class=" aligncenter wp-image-525917 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_02.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_02.png" alt="VEPA MACVLAN configuration" width="433" height="372" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_02.png 433w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_02-300x258.png 300w" sizes="(max-width: 433px) 100vw, 433px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;3. Bridge: all endpoints are directly connected to each other with a simple bridge via the physical interface.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_03.png"&gt;&lt;img class=" aligncenter wp-image-525927 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_03.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_03.png" alt="Bridge MACVLAN configuration" width="435" height="369" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_03.png 435w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_03-300x254.png 300w" sizes="(max-width: 435px) 100vw, 435px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;4. Passthru: allows a single VM to be connected directly to the physical interface.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_04.png"&gt;&lt;img class=" aligncenter wp-image-525937 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_04.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_04.png" alt="Passthru MACVLAN configuration" width="291" height="318" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_04.png 291w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvlan_04-275x300.png 275w" sizes="(max-width: 291px) 100vw, 291px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;5. Source: the source mode is used to filter traffic based on a list of allowed source MAC addresses to create MAC-based VLAN associations. Please see the &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/davem/net.git/commit/?id=79cf79abce71" target="_blank" rel="noopener"&gt;commit message&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The type is chosen according to different needs. Bridge mode is the most commonly used.&lt;/p&gt; &lt;p&gt;Use a MACVLAN when you want to connect directly to a physical network from containers.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to set up a MACVLAN:&lt;/p&gt; &lt;pre&gt;# ip link add macv1 link eth0 type macvlan mode bridge # ip link add macv2 link eth0 type macvlan mode bridge # ip netns add net1 # ip netns add net2 # ip link set macvlan1 netns net1 # ip link set macvlan2 netns net2 &lt;/pre&gt; &lt;p&gt;This creates two new MACVLAN devices in bridge mode and assigns these two devices to two different namespaces.&lt;/p&gt; &lt;h2&gt;&lt;a name="ipvlan"&gt;&lt;/a&gt;IPVLAN&lt;/h2&gt; &lt;p&gt;IPVLAN is similar to MACVLAN with the difference being that the endpoints have the same MAC address.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan.png"&gt;&lt;img class=" aligncenter wp-image-525847 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan.png" alt="IPVLAN configuration" width="861" height="373" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan.png 861w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan-300x130.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan-768x333.png 768w" sizes="(max-width: 861px) 100vw, 861px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;IPVLAN supports L2 and L3 mode. IPVLAN L2 mode acts like a MACVLAN in bridge mode. The parent interface looks like a bridge or switch.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_01.png"&gt;&lt;img class=" aligncenter wp-image-525857 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_01.png" alt="IPVLAN L2 mode" width="438" height="367" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_01.png 438w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_01-300x251.png 300w" sizes="(max-width: 438px) 100vw, 438px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In IPVLAN L3 mode, the parent interface acts like a router and packets are routed between endpoints, which gives better scalability.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_02.png"&gt;&lt;img class=" aligncenter wp-image-525867 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_02.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_02.png" alt="IPVLAN L3 mode" width="437" height="373" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_02.png 437w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/ipvlan_02-300x256.png 300w" sizes="(max-width: 437px) 100vw, 437px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Regarding when to use an IPVLAN, the &lt;a href="https://www.kernel.org/doc/Documentation/networking/ipvlan.txt" target="_blank" rel="noopener"&gt;IPVLAN kernel documentation&lt;/a&gt; says that MACVLAN and IPVLAN &amp;#8220;are very similar in many regards and the specific use case could very well define which device to choose. if one of the following situations defines your use case then you can choose to use ipvlan &amp;#8211;&lt;br /&gt; (a) The Linux host that is connected to the external switch / router has policy configured that allows only one mac per port.&lt;br /&gt; (b) No of virtual devices created on a master exceed the mac capacity and puts the NIC in promiscuous mode and degraded performance is a concern.&lt;br /&gt; (c) If the slave device is to be put into the hostile / untrusted network namespace where L2 on the slave could be changed / misused.&amp;#8221;&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to set up an IPVLAN instance:&lt;/p&gt; &lt;pre&gt;# ip netns add ns0 # ip link add name ipv1 link eth0 type ipvlan mode l2 # ip link set dev ipvl0 netns ns0 &lt;/pre&gt; &lt;p&gt;This creates an IPVLAN device named &lt;code&gt;ipvl0&lt;/code&gt; with mode L2, assigned to namespace &lt;code&gt;ns0&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a name="macvtap"&gt;&lt;/a&gt;MACVTAP/IPVTAP&lt;/h2&gt; &lt;p&gt;MACVTAP/IPVTAP is a new device driver meant to simplify virtualized bridged networking. When a MACVTAP/IPVTAP instance is created on top of a physical interface, the kernel also creates a character device/dev/tapX to be used just like a &lt;a href="https://en.wikipedia.org/wiki/TUN/TAP" target="_blank" rel="noopener"&gt;TUN/TAP&lt;/a&gt; device, which can be directly used by KVM/QEMU.&lt;/p&gt; &lt;p&gt;With MACVTAP/IPVTAP, you can replace the combination of TUN/TAP and bridge drivers with a single module:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvtap.png"&gt;&lt;img class=" aligncenter wp-image-525947 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvtap.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvtap.png" alt="MACVTAP/IPVTAP instance" width="436" height="375" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvtap.png 436w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macvtap-300x258.png 300w" sizes="(max-width: 436px) 100vw, 436px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Typically, MACVLAN/IPVLAN is used to make both the guest and the host show up directly on the switch to which the host is connected. The difference between MACVTAP and IPVTAP is same as with MACVLAN/IPVLAN.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a MACVTAP instance:&lt;/p&gt; &lt;pre&gt;# ip link add link eth0 name macvtap0 type macvtap &lt;/pre&gt; &lt;h2&gt;&lt;a name="macsec"&gt;&lt;/a&gt;MACsec&lt;/h2&gt; &lt;p&gt;MACsec (Media Access Control Security) is an IEEE standard for security in wired Ethernet LANs. Similar to IPsec, as a layer 2 specification, MACsec can protect not only IP traffic but also ARP, neighbor discovery, and DHCP. The MACsec headers look like this:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec_01.png"&gt;&lt;img class=" aligncenter wp-image-525887 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec_01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec_01.png" alt="MACsec header" width="999" height="226" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec_01.png 999w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec_01-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec_01-768x174.png 768w" sizes="(max-width: 999px) 100vw, 999px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The main use case for MACsec is to secure all messages on a standard LAN including ARP, NS, and DHCP messages.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec.png"&gt;&lt;img class=" aligncenter wp-image-525877 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec.png" alt="MACsec configuration" width="452" height="277" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec.png 452w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/macsec-300x184.png 300w" sizes="(max-width: 452px) 100vw, 452px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to set up a MACsec configuration:&lt;/p&gt; &lt;pre&gt;# ip link add macsec0 link eth1 type macsec &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: This only adds a MACsec device called &lt;code&gt;macsec0&lt;/code&gt; on interface &lt;code&gt;eth1&lt;/code&gt;. For more detailed configurations, please see the &amp;#8220;Configuration example&amp;#8221; section in this &lt;a href="https://developers.redhat.com/blog/2016/10/14/macsec-a-different-solution-to-encrypt-network-traffic/" target="_blank" rel="noopener"&gt;MACsec introduction by Sabrina Dubroca&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a name="veth"&gt;&lt;/a&gt;VETH&lt;/h2&gt; &lt;p&gt;The VETH (virtual Ethernet) device is a local Ethernet tunnel. Devices are created in pairs, as shown in the diagram below.&lt;/p&gt; &lt;p&gt;Packets transmitted on one device in the pair are immediately received on the other device. When either device is down, the link state of the pair is down.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/veth.png"&gt;&lt;img class=" aligncenter wp-image-525977 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/veth.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/veth.png" alt="Pair of VETH devices" width="437" height="367" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/veth.png 437w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/veth-300x252.png 300w" sizes="(max-width: 437px) 100vw, 437px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Use a VETH configuration when namespaces need to communicate to the main host namespace or between each other.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to set up a VETH configuration:&lt;/p&gt; &lt;pre&gt;# ip netns add net1 # ip netns add net2 # ip link add veth1 netns net1 type veth peer name veth2 netns net2 &lt;/pre&gt; &lt;p&gt;This creates two namespaces, &lt;code&gt;net1&lt;/code&gt; and &lt;code&gt;net2&lt;/code&gt;, and a pair of VETH devices, and it assigns &lt;code&gt;veth1&lt;/code&gt; to namespace &lt;code&gt;net1&lt;/code&gt; and &lt;code&gt;veth2&lt;/code&gt; to namespace &lt;code&gt;net2&lt;/code&gt;. These two namespaces are connected with this VETH pair. Assign a pair of IP addresses, and you can ping and communicate between the two namespaces.&lt;/p&gt; &lt;h2&gt;&lt;a name="vcan"&gt;&lt;/a&gt;VCAN&lt;/h2&gt; &lt;p&gt;Similar to the network loopback devices, the VCAN (virtual CAN) driver offers a virtual local CAN (Controller Area Network) interface, so users can send/receive CAN messages via a VCAN interface. CAN is mostly used in the automotive field nowadays.&lt;/p&gt; &lt;p&gt;For more CAN protocol information, please refer to the &lt;a href="https://www.kernel.org/doc/Documentation/networking/can.txt" target="_blank" rel="noopener"&gt;kernel CAN documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use a VCAN when you want to test a CAN protocol implementation on the local host.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a VCAN:&lt;/p&gt; &lt;pre&gt;# ip link add dev vcan1 type vcan &lt;/pre&gt; &lt;h2&gt;&lt;a name="vxcan"&gt;&lt;/a&gt;VXCAN&lt;/h2&gt; &lt;p&gt;Similar to the VETH driver, a VXCAN (Virtual CAN tunnel) implements a local CAN traffic tunnel between two VCAN network devices. When you create a VXCAN instance, two VXCAN devices are created as a pair. When one end receives the packet, the packet appears on the device&amp;#8217;s pair and vice versa. VXCAN can be used for cross-namespace communication.&lt;/p&gt; &lt;p&gt;Use a VXCAN configuration when you want to send CAN message across namespaces.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to set up a VXCAN instance:&lt;/p&gt; &lt;pre&gt;# ip netns add net1 # ip netns add net2 # ip link add vxcan1 netns net1 type vxcan peer name vxcan2 netns net2 &lt;/pre&gt; &lt;h2&gt;&lt;a name="ipoib"&gt;&lt;/a&gt;IPOIB&lt;/h2&gt; &lt;p&gt;An IPOIB device supports the IP-over-InfiniBand protocol. This transports IP packets over InfiniBand (IB) so you can use your IB device as a fast NIC.&lt;/p&gt; &lt;p&gt;The IPoIB driver supports two modes of operation: datagram and connected. In datagram mode, the IB UD (Unreliable Datagram) transport is used. In connected mode, the IB RC (Reliable Connected) transport is used. The connected mode takes advantage of the connected nature of the IB transport and allows an MTU up to the maximal IP packet size of 64K.&lt;/p&gt; &lt;p&gt;For more details, please see the &lt;a href="https://www.kernel.org/doc/Documentation/infiniband/ipoib.txt" target="_blank" rel="noopener"&gt;IPOIB kernel documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use an IPOIB device when you have an IB device and want to communicate with a remote host via IP.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create an IPOIB device:&lt;/p&gt; &lt;pre&gt;# ip link add ipoib0 type ipoib mode connected &lt;/pre&gt; &lt;h2&gt;&lt;a name="nlmon"&gt;&lt;/a&gt;NLMON&lt;/h2&gt; &lt;p&gt;NLMON is a Netlink monitor device.&lt;/p&gt; &lt;p&gt;Use an NLMON device when you want to monitor system Netlink messages.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create an NLMON device:&lt;/p&gt; &lt;pre&gt;# ip link add nlmon0 type nlmon # ip link set nlmon0 up # tcpdump -i nlmon0 -w nlmsg.pcap &lt;/pre&gt; &lt;p&gt;This creates an NLMON device named &lt;code&gt;nlmon0&lt;/code&gt; and sets it up. Use a packet sniffer (for example, &lt;code&gt;tcpdump&lt;/code&gt;) to capture Netlink messages. Recent versions of Wireshark feature decoding of Netlink messages.&lt;/p&gt; &lt;h2&gt;&lt;a name="dummy"&gt;&lt;/a&gt;Dummy interface&lt;/h2&gt; &lt;p&gt;A dummy interface is entirely virtual like, for example, the loopback interface. The purpose of a dummy interface is to provide a device to route packets through without actually transmitting them.&lt;/p&gt; &lt;p&gt;Use a dummy interface to make an inactive SLIP (Serial Line Internet Protocol) address look like a real address for local programs. Nowadays, a dummy interface is mostly used for testing and debugging.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create a dummy interface:&lt;/p&gt; &lt;pre&gt;# ip link add dummy1 type dummy # ip addr add 1.1.1.1/24 dev dummy1 # ip link set dummy1 up &lt;/pre&gt; &lt;h2&gt;&lt;a name="ifb"&gt;&lt;/a&gt;IFB&lt;/h2&gt; &lt;p&gt;The IFB (Intermediate Functional Block) driver supplies a device that allows the concentration of traffic from several sources and the shaping incoming traffic instead of dropping it.&lt;/p&gt; &lt;p&gt;Use an IFB interface when you want to queue and shape incoming traffic.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to create an IFB interface:&lt;/p&gt; &lt;pre&gt;# ip link add ifb0 type ifb # ip link set ifb0 up # tc qdisc add dev ifb0 root sfq # tc qdisc add dev eth0 handle ffff: ingress # tc filter add dev eth0 parent ffff: u32 match u32 0 0 action mirred egress redirect dev ifb0 &lt;/pre&gt; &lt;p&gt;This creates an IFB device named &lt;code&gt;ifb0&lt;/code&gt; and replaces the root qdisc scheduler with SFQ (Stochastic Fairness Queueing), which is a classless queueing scheduler. Then it adds an ingress qdisc scheduler on &lt;code&gt;eth0&lt;/code&gt; and redirects all ingress traffic to &lt;code&gt;ifb0&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more IFB qdisc use cases, please refer to this &lt;a href="https://wiki.linuxfoundation.org/networking/ifb" target="_blank" rel="noopener"&gt;Linux Foundation wiki on IFB&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/tag/virtual-networking/"&gt;Virtual networking articles&lt;/a&gt; on the Red Hat Developer blog&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/03/ovn-dynamic-ip-address-management/"&gt;Dynamic IP Address Management in Open Virtual Network (OVN)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/23/non-root-open-vswitch-rhel/"&gt;Non-root Open vSwitch in Red Hat Enterprise Linux&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/tag/open-vswitch/"&gt;Open vSwitch articles&lt;/a&gt; on the Red hat Developer Blog&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;linkname=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F22%2Fintroduction-to-linux-interfaces-for-virtual-networking%2F&amp;#38;title=Introduction%20to%20Linux%20interfaces%20for%20virtual%20networking" data-a2a-url="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/" data-a2a-title="Introduction to Linux interfaces for virtual networking"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/"&gt;Introduction to Linux interfaces for virtual networking&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PIiEiMOAcpc" height="1" width="1" alt=""/&gt;</content><summary>Linux has rich virtual networking capabilities that are used as basis for hosting VMs and containers, as well as cloud environments. In this post, I will give a brief introduction to all commonly used virtual network interface types. There is no code analysis, only a brief introduction to the interfaces and their usage on Linux. Anyone with a network background might be interested in this blog pos...</summary><dc:creator>Hangbin Liu</dc:creator><dc:date>2018-10-22T19:35:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/</feedburner:origLink></entry><entry><title>All Things Open 2018 - 10 Steps to AppDev in the Cloud Happiness (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0QJb2PMj3K4/all-things-open-2018-10-steps-to-appdev-cloud-happiness.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-all_things_open_2018_10_steps_to_appdev_in_the_cloud_happiness_slides</id><updated>2018-10-22T13:04:48Z</updated><published>2018-10-22T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;a href="https://3.bp.blogspot.com/-JSfsv5SHaZU/W35cxEg2LbI/AAAAAAAAtAc/rwTNYcEjCv8Hrp5HXZ7ZAPi7haxR10yEwCLcBGAs/s1600/10-step-journey.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="719" data-original-width="1272" height="180" src="https://3.bp.blogspot.com/-JSfsv5SHaZU/W35cxEg2LbI/AAAAAAAAtAc/rwTNYcEjCv8Hrp5HXZ7ZAPi7haxR10yEwCLcBGAs/s320/10-step-journey.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;This week I've been in Raleigh, North Carolina &lt;a href="http://www.schabell.org/2018/08/all-things-open-2018-10-steps-cloud-happiness.html" target="_blank"&gt;presenting a session&lt;/a&gt; at All Things Open 2018.&lt;br /&gt;&lt;br /&gt;It's a hands-on kinda of mini-workshop that was put into session format so that I'd be able to walk you through the process of getting started on cloud application development.&lt;br /&gt;&lt;br /&gt;It's not just getting container development working, but getting you started with meaningful enterprise components such as process automation, business logic and integration topics.&lt;br /&gt;&lt;br /&gt;Here are the slides from this session with all the links to the material I presented live on stage.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="https://www.slideshare.net/slideshow/embed_code/key/aVfgqT77NgEGMs" style="border-color: rgb(204, 204, 204); border-style: solid; border-width: 1px; margin-bottom: 5px; max-width: 100%;" width="510"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;For completeness, here's the session abstract:&lt;br /&gt;&lt;h3&gt;&lt;a href="https://allthingsopen.org/talk/10-steps-to-cloud-happiness/" target="_blank"&gt;10 Steps to Cloud Happiness&lt;/a&gt; &lt;/h3&gt;&lt;i&gt;A modern developers world is full of new tools, new technologies and getting started can become a bit daunting. Let's take a tour of how to get started with containers, Cloud and some examples so that you have your very own private PaaS Cloud on your laptop. You'll be given a private Cloud in minutes that turns your laptop into a container platform where you then can explore a multitude of example projects from such domains as retail, travel, finance and more. Hold on to your developer hats as we get you started on application development in the Cloud with open technologies, Ansible deployment automation and container-based fun. Everything you're shown in this session is available for attendees to explore online and hands-on once they've returned home.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; &lt;i&gt;Date: Monday, OCT 22&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Time: 04:15 PM, local time&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Room: 303&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Thanks for attending!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ep8a7ZorU7U:uXbqLqCt5Qw:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ep8a7ZorU7U:uXbqLqCt5Qw:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ep8a7ZorU7U:uXbqLqCt5Qw:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ep8a7ZorU7U:uXbqLqCt5Qw:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ep8a7ZorU7U:uXbqLqCt5Qw:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ep8a7ZorU7U" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0QJb2PMj3K4" height="1" width="1" alt=""/&gt;</content><summary>This week I've been in Raleigh, North Carolina presenting a session at All Things Open 2018. It's a hands-on kinda of mini-workshop that was put into session format so that I'd be able to walk you through the process of getting started on cloud application development. It's not just getting container development working, but getting you started with meaningful enterprise components such as process...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-10-22T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ep8a7ZorU7U/all-things-open-2018-10-steps-to-appdev-cloud-happiness.html</feedburner:origLink></entry><entry><title>Narayana integration with Agroal connection pool</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nhf7J4PAni8/integration-with-agroal-database.html" /><category term="Database" scheme="searchisko:content:tags" /><category term="feed_group_name_jbosstransactions" scheme="searchisko:content:tags" /><category term="feed_name_transactions" scheme="searchisko:content:tags" /><category term="JDBC" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>Ondřej Chaloupka</name></author><id>searchisko:content:id:jbossorg_blog-narayana_integration_with_agroal_connection_pool</id><updated>2018-10-19T15:14:56Z</updated><published>2018-10-19T14:57:00Z</published><content type="html">&lt;p&gt;Project &lt;a href="http://agroal.github.io" target="_blank"&gt;Agroal&lt;/a&gt; defines itself as &lt;i&gt;“The natural database connection pool”&lt;/i&gt;. And that’s what is it. &lt;/p&gt; &lt;p&gt;It was developed by &lt;a href="https://github.com/barreiro" target="_blank"&gt;Luis Barreiro&lt;/a&gt;. He works for WildFly as a performance engineer. This prefigures what you can expect &amp;ndash; &lt;a href="https://github.com/agroal/agroal.benchmark"&gt;a well performing&lt;/a&gt; database connection pool. As Agroal comes from the porfolio of the WildFly projects it offers smooth integration with WildFly and &lt;a href="https://github.com/agroal/agroal/tree/master/agroal-narayana"&gt;with Narayana&lt;/a&gt; too. &lt;/p&gt; &lt;p&gt;In the previous posts we checked other connection pools that you can use with Narayana - either the &lt;a href="https://jbossts.blogspot.com/2017/12/narayana-jdbc-transactional-driver.html"&gt;transactional driver provided by Narayana&lt;/a&gt; or &lt;a href="https://jbossts.blogspot.com/2018/05/narayana-jdbc-integration-for-tomcat.html"&gt;DBCP2&lt;/a&gt; which is nicely integrated to be used with Narayana in Apache Tomcat. Another option is the use of the &lt;a href="http://www.ironjacamar.org"&gt;IronJacamar&lt;/a&gt; which lives in the long-termed brotherhood with Narayana. All those options are nicely documented in &lt;a href="https://github.com/jbosstm/quickstart/"&gt;our quickstarts&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Agroal is a party member and you should consider to check it. Either when running standalone application with Narayana or when you run on WildFly. Let’s take a look how you can use it in the standalone application first. &lt;/p&gt; &lt;h2&gt;Agroal with Narayana standalone&lt;/h2&gt; &lt;p&gt;In case you want to use the Agroal JDBC pooling capabilities with Narayana in your application you need to configure the Agroal datasource to know &lt;ul&gt; &lt;li&gt;how to grab the instance of the Narayana transaction manager&lt;/li&gt; &lt;li&gt;where to find &lt;a href="https://docs.oracle.com/javaee/7/api/javax/transaction/TransactionSynchronizationRegistry.html" target="_blank"&gt;the synchronization registry&lt;/a&gt;&lt;/li&gt; &lt;li&gt;how to register resources to Narayana recovery manager&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; &lt;h3&gt;Narayana setup&lt;/h3&gt; &lt;p&gt;First we need to gain all the mentioned Narayana objects which are then passed to Agroal which ensures the integration by calling the Narayana API at appropriate moments. &lt;pre&gt;&lt;code style="java"&gt;// gaining the transction manager and synchronization registry&lt;br /&gt;TransactionManager transactionManager&lt;br /&gt; = com.arjuna.ats.jta.TransactionManager.transactionManager();&lt;br /&gt;TransactionSynchronizationRegistry transactionSynchronizationRegistry&lt;br /&gt; = new com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionSynchronizationRegistryImple();&lt;br /&gt;&lt;br /&gt;// intitialization of recovery manager&lt;br /&gt;RecoveryManager recoveryManager&lt;br /&gt; = com.arjuna.ats.arjuna.recovery.RecoveryManager.manager();&lt;br /&gt;recoveryManager.initialize();&lt;br /&gt;// recovery service provides binding for hooking the XAResource to recovery process&lt;br /&gt;RecoveryManagerService recoveryManagerService&lt;br /&gt; = new com.arjuna.ats.jbossatx.jta.RecoveryManagerService();&lt;br /&gt;recoveryManagerService.create();&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;h3&gt;Agroal integration&lt;/h3&gt; &lt;p&gt;Now we need to pass the Narayana's object instances to Agroal. With that being done we can obtain a JDBC &lt;code&gt;Connection&lt;/code&gt;which is backed by the transaction manager. &lt;pre&gt;&lt;code style="java"&gt;&lt;br /&gt;AgroalDataSourceConfigurationSupplier configurationSupplier&lt;br /&gt; = new AgroalDataSourceConfigurationSupplier()&lt;br /&gt; .connectionPoolConfiguration(cp -&gt; cp&lt;br /&gt; .transactionIntegration(new NarayanaTransactionIntegration(&lt;br /&gt; transactionManager, transactionSynchronizationRegistry,&lt;br /&gt; "java:/agroalds1", false, recoveryManagerService))&lt;br /&gt; cf.connectionFactoryConfiguration(cf -&gt;&lt;br /&gt; .jdbcUrl("jdbc:h2:mem:test")&lt;br /&gt; .principal(new NamePrincipal("testuser"))&lt;br /&gt; .credential(new SimplePassword("testpass"))&lt;br /&gt; .recoveryPrincipal(new NamePrincipal("testuser"))&lt;br /&gt; .recoveryCredential(new SimplePassword("testpass"))&lt;br /&gt; .connectionProviderClassName("org.h2.jdbcx.JdbcDataSource"))&lt;br /&gt; .maxSize(10)&lt;br /&gt; );&lt;br /&gt;AgroalDataSource ds1 = AgroalDataSource.from(configurationSupplier);&lt;br /&gt;&lt;br /&gt;transactionManager.begin();&lt;br /&gt;&lt;br /&gt;conn1 = ds1.getConnection();&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;Those are steps needed for the standalone application to use Narayana and Agroal. The working code example could be seen in the Narayana quickstart at &lt;a href="https://github.com/jbosstm/quickstart/blob/master/agroal/src/main/java/io/narayana/AgroalDatasource.java" target="_blank"&gt;github.com/jbosstm/quickstart#agroal - AgroalDatasource.java&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Agroal XA datasource in WildFly&lt;/h2&gt; &lt;p&gt;If you want to use the power of Narayana in the WildFly application you need XA participants that Narayana can drive. From Agroal perspective you need to define a xa datasource which you use (linked via JNDI name) in your application. &lt;/p&gt; &lt;p&gt;&lt;i&gt;DISCLAIMER: for you can use the Agroal capabilities integrated with Narayana you will need to run WildFly 15 or later. Currently only WildFly 14 is available so for testing this you need to build the WildFly from sources by yourself. The good message is that’s an easy task &amp;ndash; see at &lt;a href="https://github.com/wildfly/wildfly/#building"&gt;https://github.com/wildfly/wildfly/#building&lt;/a&gt;. &lt;/i&gt;&lt;/p&gt; &lt;p&gt;Agroal datasource subsystem is not available by default in the &lt;code&gt;standalone.xml&lt;/code&gt; file so you need to enable that extension. When you run the &lt;code&gt;jboss cli&lt;/code&gt;commands then you do it like this &lt;/p&gt; &lt;p&gt;&lt;pre&gt;&lt;code style="bash"&gt;cd $JBOSS_HOME&lt;br /&gt;./bin/jboss-cli.sh -c&lt;br /&gt;&lt;br /&gt;# jboss-cli is started, run following command there&lt;br /&gt;/extension=org.wildfly.extension.datasources-agroal:add&lt;br /&gt;/subsystem=datasources-agroal:add()&lt;br /&gt;:reload&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;From now you can work with the &lt;code&gt;datasources-agroal&lt;/code&gt; subsystem. For you can create the &lt;code&gt;xa-datasource&lt;/code&gt; definition you need to have a driver which the datasource will use. The driver has to define it’s XA connection provider. &lt;p&gt; &lt;p&gt;&lt;i&gt;NOTE:&lt;/i&gt; if you want to check what are options for the Agroal configuration in the jboss cli then read the resource description with command &lt;code&gt;/subsystem=datasources-agroal:read-resource-description(recursive=true)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Agroal driver definition works only with drivers &lt;a href="https://docs.jboss.org/author/display/WFLY10/Class+Loading+in+WildFly" target="_blank"&gt;deployed as modules&lt;/a&gt;. You can’t just copy the driver jar to &lt;code&gt;$JBOSS_HOME/standalone/deployments&lt;/code&gt; directory but you need to create a module under &lt;code&gt;$JBOSS_HOME/modules&lt;/code&gt; directory. See details either by creating &lt;code&gt;module.xml&lt;/code&gt; &lt;a href="http://www.adam-bien.com/roller/abien/entry/installing_oracle_jdbc_driver_on" target="_blank"&gt;by yourself&lt;/a&gt; or the recommended way is using the &lt;code&gt;jboss cli&lt;/code&gt; with command &lt;pre&gt;&lt;code style="bash"&gt;module add --name=org.postgresql&lt;br /&gt; --resources=/path/to/jdbc/driver.jar --dependencies=javax.api,javax.transaction.api&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;NOTE:&lt;/i&gt; The command uses the name of the module &lt;code&gt;org.postgresql&lt;/code&gt; as I will demonstrate adding the xa datasource for the PostgreSQL database. &lt;/p&gt; &lt;p&gt;When the module is added we can declare the Agroal’s driver. &lt;pre&gt;&lt;code style="bash"&gt;/subsystem=datasources-agroal/driver=postgres:add(&lt;br /&gt; module=org.postgresql, class=org.postgresql.xa.PGXADataSource)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;We’ve used the class &lt;code&gt;org.postgresql.xa.PGXADataSource&lt;/code&gt; as we want to use it as XA datasource. When class is not defined then standard jdbc driver for PostgresSQL is used (&lt;code&gt;org.postgresql.Driver&lt;/code&gt;) as declared &lt;a href="https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/resources/META-INF/services/java.sql.Driver" target="_blank"&gt;in the &lt;code&gt;META-INF/services/java.sql.Driver&lt;/code&gt; file&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;&lt;i&gt;NOTE:&lt;/i&gt; If you would declare the driver without the XA datasource being defined and then you try to add it to XA datasource definition you will get an error &lt;pre&gt;&lt;code style="bash"&gt;/subsystem=datasources-agroal/driver=non-xa-postgres:add(module=org.postgresql)&lt;br /&gt;/subsystem=datasources-agroal/xa-datasource=AgroalPostgresql:add(&lt;br /&gt; connection-factory={driver=non-xa-postgres},...)&lt;br /&gt;{&lt;br /&gt; "outcome" =&gt; "failed",&lt;br /&gt; "failure-description" =&gt; {"WFLYCTL0080: Failed services" =&gt; {"org.wildfly.data-source.AgroalPostgresql"&lt;br /&gt; =&gt; "WFLYAG0108: An xa-datasource requires a javax.sql.XADataSource as connection provider. Fix the connection-provider for the driver"}&lt;br /&gt;},&lt;br /&gt; "rolled-back" =&gt; true&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;When the JDBC driver module is defined we can create the Agroal XA datasource. The bare minimum of attributes you have to define is shown in the following command &lt;pre&gt;&lt;code style="bash"&gt;/subsystem=datasources-agroal/xa-datasource=AgroalPostgresql:add(&lt;br /&gt; jndi-name=java:/AgroalPostgresql, connection-pool={max-size=10}, connection-factory={&lt;br /&gt; driver=postgres, username=test, password=test,url=jdbc:postgresql://localhost:5432/test})&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;NOTE:&lt;/i&gt; this is the most simple way of define the credentials for the connection to database. If you consider more sophisticated method, than just username/password as clear strings saved in the standalone.xml, take a look at the &lt;a href="https://docs.jboss.org/author/display/WFLY/WildFly+Elytron+Security" target="_blank"&gt;Elytron capabilities&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;To check if the WildFly Agroal datasource is able to connect to the database you can use test-connection command &lt;pre&gt;&lt;code style="bash"&gt;/subsystem=datasources-agroal/xa-datasource=AgroalPostgresql:test-connection()&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;If you are insterested how the configuration looks as a xml element in &lt;code&gt;standalone.xml&lt;/code&gt; configuration file then the Agroal subsystem with PostgreSQL XA datasource definition would look like &lt;pre&gt;&lt;code style="xml"&gt;&amp;lt;subsystem xmlns="urn:jboss:domain:datasources-agroal:1.0"&amp;gt;&lt;br /&gt; &amp;lt;xa-datasource name="AgroalPostgresql" jndi-name="java:/AgroalPostgresql"&amp;gt;&lt;br /&gt; &amp;lt;connection-factory driver="postgres" url="jdbc:postgresql://localhost:5432/test"&lt;br /&gt; username="test" password="test"/&amp;gt;&lt;br /&gt; &amp;lt;connection-pool max-size="10"/&amp;gt;&lt;br /&gt; &amp;lt;/xa-datasource&amp;gt;&lt;br /&gt; &amp;lt;drivers&amp;gt;&lt;br /&gt; &amp;lt;driver name="postgres" module="org.postgresql" class="org.postgresql.xa.PGXADataSource"/&amp;gt;&lt;br /&gt; &amp;lt;/drivers&amp;gt;&lt;br /&gt;&amp;lt;/subsystem&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;If you want use the Agroal non-xa datasource as commit markable resource (CMR) it’s possible too. You need to create a standard datasource and define it as connectable. For more information what the commit markable resource means and how it works &lt;a href="https://jbossts.blogspot.com/2018/06/narayana-commit-markable-resource.html" target="_blank"&gt;check our previous blogpost about CMR&lt;/a&gt;. &lt;pre&gt;&lt;code style="xml"&gt;&amp;lt;subsystem xmlns="urn:jboss:domain:datasources-agroal:1.0"&amp;gt;&lt;br /&gt; &amp;lt;datasource name="AgroalPostgresql" connectable="true" jndi-name="java:/AgroalPostgresql"&lt;br /&gt; statistics-enabled="true"&amp;gt;&lt;br /&gt; &amp;lt;connection-factory driver="postgres" url="jdbc:postgresql://localhost:5432/test"&lt;br /&gt; username="test" password="test"/&amp;gt;&lt;br /&gt; &amp;lt;connection-pool max-size="10"/&amp;gt;&lt;br /&gt; &amp;lt;/datasource&amp;gt;&lt;br /&gt; &amp;lt;drivers&amp;gt;&lt;br /&gt; &amp;lt;driver name="postgres" module="org.postgresql" class="org.postgresql.Driver"/&amp;gt;&lt;br /&gt; &amp;lt;/drivers&amp;gt;&lt;br /&gt;&amp;lt;/subsystem&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;NOTE:&lt;/i&gt; In addition to this configuration of Agroal datasource you need to enable the CMR in the transaction subsystem too &amp;ndash; &lt;a href="https://jbossts.blogspot.com/2018/06/narayana-commit-markable-resource.html" target="_blank"&gt;check the blogpost for detailed info&lt;/a&gt;. &lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;This blogpost showed way how to configure Agroal JDBC pooling library and how to integrate it with Narayana.&lt;br/&gt;The code example is part of the Narayana quickstart and you can check it at &lt;a href="https://github.com/jbosstm/quickstart/tree/master/agroal"&gt;https://github.com/jbosstm/quickstart/tree/master/agroal&lt;/a&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nhf7J4PAni8" height="1" width="1" alt=""/&gt;</content><summary>Project Agroal defines itself as “The natural database connection pool”. And that’s what is it. It was developed by Luis Barreiro. He works for WildFly as a performance engineer. This prefigures what you can expect – a well performing database connection pool. As Agroal comes from the porfolio of the WildFly projects it offers smooth integration with WildFly and with Narayana too. In the previous ...</summary><dc:creator>Ondřej Chaloupka</dc:creator><dc:date>2018-10-19T14:57:00Z</dc:date><feedburner:origLink>http://jbossts.blogspot.com/2018/10/integration-with-agroal-database.html</feedburner:origLink></entry><entry><title>New DMN Editor Preview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5vxu0aFn4Is/new-dmn-editor-preview.html" /><category term="#bpmn" scheme="searchisko:content:tags" /><category term="#dmn" scheme="searchisko:content:tags" /><category term="#Drools" scheme="searchisko:content:tags" /><category term="#editor" scheme="searchisko:content:tags" /><category term="#redhat" scheme="searchisko:content:tags" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Guilherme Carreiro</name></author><id>searchisko:content:id:jbossorg_blog-new_dmn_editor_preview</id><updated>2018-10-18T19:29:11Z</updated><published>2018-10-18T17:46:00Z</published><content type="html">&lt;p&gt;The Workbench 7.13.0.Final was released Tuesday, October 16, and this version brings a lot of interesting features and important fixes. One of the highlights is the new DMN Editor as a tech preview feature that is still under development but that you can begin using. &lt;/p&gt; &lt;p&gt;In this article, you'll learn how to enable the DMN Editor Preview, create a simple DMN model, and execute it via a REST API. &lt;/p&gt; &lt;p&gt;Let's get started :-) &lt;/p&gt; &lt;h3&gt;1) Enabling the Preview editor&lt;/h3&gt; &lt;p&gt;Since the feature is available as a tech preview, it's hidden by default. To enable it, go to &lt;code&gt;Settings -&gt; Roles&lt;/code&gt;, select the role you're logged in (for example, "admin") and remove the "DMN Designer" exception in the "Permissions" section. Take a look at the steps: &lt;/p&gt; &lt;div&gt;&lt;a href="https://3.bp.blogspot.com/-_ojMI-Q3jQ4/W8i-sqxOGKI/AAAAAAAACnQ/nNSWN8q7kRcpnAEV8m5a3TZaV0XpNtv8QCLcBGAs/s1600/steps.gif" imageanchor="1" &gt;&lt;img border="0" src="https://3.bp.blogspot.com/-_ojMI-Q3jQ4/W8i-sqxOGKI/AAAAAAAACnQ/nNSWN8q7kRcpnAEV8m5a3TZaV0XpNtv8QCLcBGAs/s1600/steps.gif" width="80%" data-original-width="1600" data-original-height="1007" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt; &lt;h3&gt;2) Creating a DMN model&lt;/h3&gt; &lt;p&gt;Now that you have the DMN Editor enabled, let's create a new project: Go to "Projects", click on "Add asset" and then open the "DMN Preview". Here you can explore the editor and create your DMN file with your own rules or you can follow the steps provided by this video: &lt;/p&gt; &lt;iframe width="80%" height="315" src="https://www.youtube.com/embed/USok3wjCQHU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;Notice that two input nodes ("Number of branches" and "Branches dispersion") and one decision node ("Branches distribution") were inserted. Additionally, we created a Decision Table in the "Branches distribution" node to write some rules. &lt;/p&gt; &lt;p&gt;The DMN file created in the video can be downloaded &lt;a href="https://gist.github.com/karreiro/f1b862396a544620fbc14df694348478"&gt;here&lt;/a&gt;. &lt;/p&gt; &lt;h3&gt;3) Executing the DMN model&lt;/h3&gt; &lt;p&gt;With the DMN file created and saved, it's time to deploy the DMN model. Go to &lt;code&gt;Projects -&gt; Your project&lt;/code&gt; and click on "Deploy" to deploy your project in a KIE Server. Now, access your instance with the "/dmn" suffix, in my case the URL is: &lt;a href="http://localhost:8080/kie-server/services/rest/server/containers/DMNSample_1.0.0/dmn"&gt;http://localhost:8080/kie-server/services/rest/server/containers/DMNSample_1.0.0/dmn&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If you follow the steps above correctly, you'll see something like this: &lt;/p&gt; &lt;div&gt;&lt;a href="https://4.bp.blogspot.com/-yAxHQlY5BV4/W8i-8Cz7EZI/AAAAAAAACnU/NSkvUBiTB4wazYjo1Oj31Yf-3YaDsmANwCLcBGAs/s1600/response.png" imageanchor="1" &gt;&lt;img border="0" src="https://4.bp.blogspot.com/-yAxHQlY5BV4/W8i-8Cz7EZI/AAAAAAAACnU/NSkvUBiTB4wazYjo1Oj31Yf-3YaDsmANwCLcBGAs/s1600/response.png" width="80%" data-original-width="1600" data-original-height="1009" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt; &lt;p&gt;Notice the &lt;code&gt;model-namespace&lt;/code&gt; and the &lt;code&gt;model-name&lt;/code&gt; values, they will be useful in the next step. &lt;/p&gt; &lt;p&gt;Now, we can make requests to execute rules in our KIE Server instance. See the example below: &lt;/p&gt; &lt;script src="https://gist.github.com/karreiro/b09c9aa6b6339c95f18233b10b5460ed.js"&gt;&lt;/script&gt; &lt;p&gt;Replace the URL, the &lt;code&gt;model-namespace&lt;/code&gt; and the &lt;code&gt;model-name&lt;/code&gt; with your own information, and try it locally. The rules will be executed by the KIE Server with the DMN model you've created, and the response will be something like this: &lt;/p&gt; &lt;script src="https://gist.github.com/karreiro/a19e77b9d23bbd0efd497ee379d2d9fd.js"&gt;&lt;/script&gt; &lt;p&gt;This article describes a small part of all the functionality of the DMN Editor. You can write even more complex rules by applying different structures. If you want to read more about the DMN specification, see the &lt;a href="http://blog.athico.com/2018/04/the-dmn-cookbook-is-published.html"&gt;DMN Cookbook&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;The DMN Editor is still under development. New features and enhancements are to come. Stay tuned ;-) &lt;/p&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=1xv739cHyHI:iGwGR2Ut0Zo:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=1xv739cHyHI:iGwGR2Ut0Zo:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=1xv739cHyHI:iGwGR2Ut0Zo:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=1xv739cHyHI:iGwGR2Ut0Zo:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/1xv739cHyHI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5vxu0aFn4Is" height="1" width="1" alt=""/&gt;</content><summary>The Workbench 7.13.0.Final was released Tuesday, October 16, and this version brings a lot of interesting features and important fixes. One of the highlights is the new DMN Editor as a tech preview feature that is still under development but that you can begin using. In this article, you'll learn how to enable the DMN Editor Preview, create a simple DMN model, and execute it via a REST API. Let's ...</summary><dc:creator>Guilherme Carreiro</dc:creator><dc:date>2018-10-18T17:46:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/1xv739cHyHI/new-dmn-editor-preview.html</feedburner:origLink></entry><entry><title>Modernize your application deployment with Lift and Shift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/u6Ah9FMNTZY/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Lift and Shift" scheme="searchisko:content:tags" /><category term="migration" scheme="searchisko:content:tags" /><category term="modernization" scheme="searchisko:content:tags" /><category term="Red Hat Application Migration Toolkit" scheme="searchisko:content:tags" /><category term="Red Hat Application Migration Toolset" scheme="searchisko:content:tags" /><category term="Red Hat JBoss EAP" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Enterprise Application Platform" scheme="searchisko:content:tags" /><author><name>Doug Tidwell</name></author><id>searchisko:content:id:jbossorg_blog-modernize_your_application_deployment_with_lift_and_shift</id><updated>2018-10-18T17:17:41Z</updated><published>2018-10-18T17:17:41Z</published><content type="html">&lt;p&gt;For many software modernization projects, it’s all about learning to love, lift, and shift. No, wait. It’s all about learning to love &lt;em&gt;lift and shift.&lt;/em&gt; The basic idea behind lift and shift is to modernize how an existing application is packaged and deployed. Because it’s not about rewriting the application itself, lift and shift is typically quick to implement.&lt;/p&gt; &lt;p&gt;Modern development environments rely on containers for packaging and deployment. A modern environment also uses a continuous integration / continuous deployment (CI/CD) system that automatically builds, tests, and deploys an application whenever its source code changes.&lt;span id="more-528867"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;As an example, consider an application built on J2EE and running as a set of virtual machines. Repackaging the application as a set of containers and deploying them in a platform-as-a-service lets you use tools like &lt;a href="http://openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio service mesh&lt;/a&gt; to manage those containers. Within that architecture, a modular app server like &lt;a href="https://developers.redhat.com/products/eap/overview/"&gt;Red Hat JBoss Enterprise Application Server&lt;/a&gt; (JBoss EAP) is perfect for container and cloud deployments. In addition, you can set up a CI/CD pipeline so that any future changes to the application are built and deployed automatically. Finally, you can use modern techniques such as canary deployments or blue/green deployments to roll out the changes into production. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;Or, let’s say you’ve got a multi-tiered application, with each tier running on a different physical server. With lift and shift, you create a container for each tier. Those containers have the code for the tier (the presentation layer, the business logic, the database, and so forth), configuration information, and the runtime libraries and other dependencies that the code needs. Once the containers are built and configured to work together, you can deploy them to a public, private, or hybrid cloud. As with the previous example, lift and shift lets you take advantage of new technologies by repackaging the application, not by changing it.&lt;/p&gt; &lt;p&gt;Lift and shift gives you access to state-of-the-art technologies when you deploy the application today and when you make changes to the application in the future.&lt;/p&gt; &lt;h2&gt;An aside: the selfish perspective&lt;/h2&gt; &lt;p&gt;Although moving your enterprise forward is the goal of your team, one of your most important personal responsibilities is keeping your skills current. Whether you’re trying to get ahead in your current job or trying to move ahead to a new one, you want your brain and your resume loaded with the latest technologies.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;When you think about modernizing a legacy application, you probably envision long nights going through ancient code, learning the old languages and techniques that keep that legacy application running. With lift and shift, however, you don’t change the code of the app, you change how it’s packaged and deployed. You’ll actually build modern skills as you master containers and CI/CD. So if you’ve been assigned to a lift and shift project, be of good cheer. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;(By the way, show that trusty enterprise app some respect. Legacy code is what makes sure your paycheck doesn’t bounce, your flight arrives safely, and that the sun comes up in the morning.)&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Other approaches to application modernization&lt;/h3&gt; &lt;p&gt;Before we go, we’ll take a quick look at two other approaches to modernization: Augmenting an application with &lt;em&gt;new layers&lt;/em&gt; and &lt;em&gt;Rewriting the application&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Augmenting the application, as the name implies, doesn’t involve changing the existing application. Instead, new layers are added on top of legacy code. For example, say you have an accounting system that includes credit card processing. It was developed in the early 2000s and works exactly as designed. If you wanted to use that same functionality in a new application (a mobile app, for example), you could create a layer that sits between the existing app and the new one. The added layer is typically nothing more than an adapter between the two applications, although in some cases the layer has business logic as well. The result of the new layer is that your legacy code effectively becomes part of the new application even though you didn’t make any changes to the legacy code.&lt;/p&gt; &lt;p&gt;Rewriting the application is the most extreme form of software modernization. The goal of rewriting is to create new components that replace and ultimately retire the existing application. This is the most expensive and time-consuming option, and replacing a critical legacy application can be extremely risky. For those reasons it can be difficult to justify this approach. Despite these drawbacks, there are times when rewriting is the best option, particularly if the legacy application is keeping your organization from being competitive. If your legacy application runs on an operating system or a hardware platform that is no longer supported, rewriting is probably your &lt;em&gt;only&lt;/em&gt; option. Rewriting doesn’t happen in isolation, however. It is often used as the final phase of modernization after augmentation and/or lift and shift.&lt;/p&gt; &lt;h2&gt;Getting started&lt;/h2&gt; &lt;p&gt;A great way to get started is with the &lt;a href="https://developers.redhat.com/products/rhamt/overview/"&gt;Red Hat Application Migration Toolkit&lt;/a&gt;, a collection of open-source tools that simplify application modernization and migration. It automatically analyzes your code and gives you actionable suggestions for moving your code from a legacy app server to a more modern architecture like JBoss EAP. See &lt;a href="https://developers.redhat.com/blog/2018/06/01/an-introduction-to-red-hat-application-migration-toolkit/"&gt;&lt;em&gt;An introduction to Red Hat Application Migration Toolkit&lt;/em&gt;&lt;/a&gt; for an overview.&lt;/p&gt; &lt;h2&gt;For more information&lt;/h2&gt; &lt;p&gt;At this point, you’re no doubt tingling with excitement and wanting to know more about application modernization. Fortunately, Red Hat has years of experience and lots of resources based on the lessons we’ve learned helping customers move their organizations forward.&lt;/p&gt; &lt;p&gt;If you’d like to read more, the article &lt;a href="https://www.redhat.com/cms/managed-files/co-modernization-whitepaper-inc0460201-122016kata-v1-en.pdf"&gt;&lt;em&gt;Making old applications new again&lt;/em&gt;&lt;/a&gt; delivers an overview of modernization techniques, how they work, and how they’re best applied.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;linkname=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F18%2Fmodernize-your-application-deployment-with-lift-and-shift%2F&amp;#38;title=Modernize%20your%20application%20deployment%20with%20Lift%20and%20Shift" data-a2a-url="https://developers.redhat.com/blog/2018/10/18/modernize-your-application-deployment-with-lift-and-shift/" data-a2a-title="Modernize your application deployment with Lift and Shift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/10/18/modernize-your-application-deployment-with-lift-and-shift/"&gt;Modernize your application deployment with Lift and Shift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/u6Ah9FMNTZY" height="1" width="1" alt=""/&gt;</content><summary>For many software modernization projects, it’s all about learning to love, lift, and shift. No, wait. It’s all about learning to love lift and shift. The basic idea behind lift and shift is to modernize how an existing application is packaged and deployed. Because it’s not about rewriting the application itself, lift and shift is typically quick to implement. Modern development environments rely o...</summary><dc:creator>Doug Tidwell</dc:creator><dc:date>2018-10-18T17:17:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/10/18/modernize-your-application-deployment-with-lift-and-shift/</feedburner:origLink></entry><entry><title>Using WildFly Elytron JASPI with Standalone Undertow</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RolxTdB39jU/using-wildfly-elytron-jaspi-with.html" /><category term="authentication" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_darrans_wildfly_blog" scheme="searchisko:content:tags" /><category term="HTTP" scheme="searchisko:content:tags" /><category term="JASPI" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="undertow" scheme="searchisko:content:tags" /><author><name>Darran Lofthouse</name></author><id>searchisko:content:id:jbossorg_blog-using_wildfly_elytron_jaspi_with_standalone_undertow</id><updated>2018-10-18T16:46:58Z</updated><published>2018-10-18T16:40:00Z</published><content type="html">As part of the development efforts for WildFly 15 an implementation of the servlet profile from the JASPI (JSR-196) specification has been added to WildFly Elytron and is in the final stages of being integrated within the application server.&lt;br /&gt;&lt;br /&gt;As with many of the features included in WildFly Elytron it is possible to make use of this outside of the application server, this blog post combined with an example project illustrates how the WildFly Elytron JASPI implementation can be used with a standalone Undertow server.&lt;br /&gt;&lt;br /&gt;The example project can be found at the following location: -&lt;br /&gt;&lt;br /&gt;&lt;a href="https://github.com/wildfly-security-incubator/elytron-examples/tree/master/undertow-standalone-jaspi"&gt;https://github.com/wildfly-security-incubator/elytron-examples/tree/master/undertow-standalone-jaspi&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The project can be built using Apache Maven using the following command: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mvn clean install&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;And executed with: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mvn exec:exec&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The remainder of this blog post will describe the remainder of the project and then demonstrate how to make an invocation to the servlet using 'curl'.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Server Auth Module&lt;/h3&gt;&lt;div&gt;This project contains a very simple ServerAuthModule '&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;org.wildfly.security.examples.jaspi.SimpleServerAuthModule&lt;/span&gt;', this module expects to receive a username using the 'X-USERNAME' header and expects to receive a password using the 'X-PASSWORD' header.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This module does not perform it's own username and password validation, instead it makes use of a 'PasswordValidationCallback' which is handled by the 'CallbackHandler' passed to the module on initialisation, this means the verification is in turn handled by WildFly Elytron.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally this module makes use of a 'GroupPrincipalCallback' which is used to override the groups / role assigned to the resulting identity and in this case assign the identity the 'Users' role.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Although this example demonstrates delegating the verification of the username and password to WildFly Elytron it is also possible to implement a ServerAuthModule which performs it's own validation and instead just describe the resulting identity using the callbacks.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Servlet&lt;/h3&gt;&lt;div&gt;To make this demonstration possible the example project contains a servlet '&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;org.wildfly.security.examples.servlet.SecuredServlet&lt;/span&gt;', the purpose of this servlet is to return a HTML page containing the name of the current authenticated identity.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Configuration and Execution&lt;/h3&gt;&lt;div&gt;Undertow and WildFly Elytron are programatically configured and started within '&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;org.wildfly.security.examples.HelloWorld&lt;/span&gt;', this class contains some initialisation that has been seen previously and some new configuration to enable JASPI and integrate with Undertow.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;createSecurityDomain()&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first step is to create the SecurityDomain backed by a SecurityRealm: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;private static SecurityDomain createSecurityDomain() throws Exception {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; PasswordFactory passwordFactory = PasswordFactory.getInstance(ALGORITHM_CLEAR, elytronProvider);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; Map&amp;lt;String, SimpleRealmEntry&amp;gt; identityMap = new HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; identityMap.put("elytron", new SimpleRealmEntry(Collections.singletonList(&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; new PasswordCredential(passwordFactory.generatePassword(new ClearPasswordSpec("Coleoptera".toCharArray()))))));&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; SimpleMapBackedSecurityRealm simpleRealm = new SimpleMapBackedSecurityRealm(() -&amp;gt; new Provider[] { elytronProvider });&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; simpleRealm.setIdentityMap(identityMap);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; SecurityDomain.Builder builder = SecurityDomain.builder()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setDefaultRealmName("TestRealm");&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; builder.addRealm("TestRealm", simpleRealm).build();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; builder.setRoleMapper(RoleMapper.constant(Roles.of("Test")));&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; builder.setPermissionMapper((principal, roles) -&amp;gt; PermissionVerifier.from(new LoginPermission()));&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; return builder.build();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here we have a single identity 'elytron' with the password 'Coleoptera', however any of the other security realms could have been used here allowing for alternative integration options.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;configureJaspi()&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next step is the JASPI configuration, at this stage this is still independent of the Undertow initialisation: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;private static String configureJaspi() {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; AuthConfigFactory authConfigFactory = new ElytronAuthConfigFactory();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; AuthConfigFactory.setFactory(authConfigFactory);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; return JaspiConfigurationBuilder.builder(null, null)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setDescription("Default Catch All Configuration")&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addAuthModuleFactory(SimpleServerAuthModule::new)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .register(authConfigFactory);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first step is to initialise the Elytron implementation of 'AuthConfigFactory' and to register it as the global default implementation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The JASPI APIs provide a lot of flexibility to allow for programatic registration of configurations, however the APIs do not provide a way to instantiate the implementations of these implementations when in the majority of the cases where dynamic registration is used it is just to register a custom ServerAuthModule.&amp;nbsp; With the changes added to Wildfly Elytron we have added a new API of our own in a class called '&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;org.wildfly.security.auth.jaspi.JaspiConfigurationBuilder&lt;/span&gt;' - this can be used to register a configuration with the 'AuthConfigFactory'.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Configuring and Starting Undertow&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now that the prior two steps have been completed it is possible to use the Undertow and WildFly Elytron APIs to complete the configuration of a deployment and start the Undertow server with JASPI authentication enabled.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first step is using the Undertow APIs to define a deployment: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;DeploymentInfo deploymentInfo = Servlets.deployment()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setClassLoader(SecuredServlet.class.getClassLoader())&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setContextPath(PATH)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setDeploymentName("helloworld.war")&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addSecurityConstraint(new SecurityConstraint()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addWebResourceCollection(new WebResourceCollection()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addUrlPattern("/secured/*"))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addRoleAllowed("Users")&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setEmptyRoleSemantic(SecurityInfo.EmptyRoleSemantic.DENY))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addServlets(Servlets.servlet(SecuredServlet.class)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addMapping(SERVLET));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Next we can use the WildFly Elytron APIs to apply Wildfly Elytron backed security to this deployment: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;AuthenticationManager authManager = AuthenticationManager.builder()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setSecurityDomain(securityDomain)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .build();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;authManager.configure(deploymentInfo);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It is worth noting this is where the WildFly Elytron SecurityDomain is associated with the deployment, the JASPI configuration performed earlier was independent of the domain.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The final stages are now to complete the deployment before creating and starting the Undertow server: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;DeploymentManager deployManager = Servlets.defaultContainer().addDeployment(deploymentInfo);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;deployManager.deploy();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;PathHandler path = Handlers.path(Handlers.redirect(PATH))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addPrefixPath(PATH, deployManager.start());&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Undertow server = Undertow.builder()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addHttpListener(PORT, HOST)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setHandler(path)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .build();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;server.start();&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Invoking the Servlet&lt;/h3&gt;&lt;div&gt;Once the server is running it is now time to invoke the servlet using 'curl', other clients could also be used however they would need to support custom headers to work with this mechanism.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Firstly if we call the servlet without any headers we should see the request rejected with a message asking for the headers: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;]$ curl -v http://localhost:28080/helloworld/secured&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; HTTP/1.1 401 Unauthorized&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Expires: 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Connection: keep-alive&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Cache-Control: no-cache, no-store, must-revalidate&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Pragma: no-cache&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; X-MESSAGE: Please resubmit the request with a username specified using the X-USERNAME and a password specified using the X-PASSWORD header.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Content-Type: text/html;charset=UTF-8&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Content-Length: 71&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We can now repeat the command and provide a username and password using the appropriate headers: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;]$ curl -v http://localhost:28080/helloworld/secured -H "X-Username:elytron" -H "X-Password:Coleoptera"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; HTTP/1.1 200 OK&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Expires: 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Connection: keep-alive&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Cache-Control: no-cache, no-store, must-revalidate&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Pragma: no-cache&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt; Content-Length: 154&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Secured Servlet&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;body&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;h1&amp;gt;Secured Servlet&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;Current Principal 'elytron'&amp;nbsp; &amp;nbsp; &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this case we now see the expected HTML specifying the name of the current identity.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RolxTdB39jU" height="1" width="1" alt=""/&gt;</content><summary>As part of the development efforts for WildFly 15 an implementation of the servlet profile from the JASPI (JSR-196) specification has been added to WildFly Elytron and is in the final stages of being integrated within the application server. As with many of the features included in WildFly Elytron it is possible to make use of this outside of the application server, this blog post combined with an...</summary><dc:creator>Darran Lofthouse</dc:creator><dc:date>2018-10-18T16:40:00Z</dc:date><feedburner:origLink>http://darranl.blogspot.com/2018/10/using-wildfly-elytron-jaspi-with.html</feedburner:origLink></entry><entry><title>Announcing: Thorntail 2.2 General Availability</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3iULLfSedp0/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="RHOAR" scheme="searchisko:content:tags" /><category term="thorntail" scheme="searchisko:content:tags" /><category term="wildfly swarm" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-announcing_thorntail_2_2_general_availability</id><updated>2018-10-17T19:25:51Z</updated><published>2018-10-17T19:25:51Z</published><content type="html">&lt;div style="float: right;"&gt;&lt;/div&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;Today Red Hat is making Thorntail 2.2 generally available to Red Hat customers through a subscription to &lt;a href="http://developers.redhat.com/rhoar"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt; (RHOAR). RHOAR provides application developers with a variety of application runtimes running on the &lt;a href="https://www.openshift.com/"&gt;OpenShift Container Platform&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Thorntail is the &lt;a href="https://www.infoq.com/news/2018/05/wildfly-thorntail"&gt;new name&lt;/a&gt; for WildFly Swarm, and bundles everything you need to develop and run &lt;a href="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/"&gt;Thorntail&lt;/a&gt; and &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt; applications by packaging server runtime libraries with your application code and running it with &lt;code&gt;java -jar&lt;/code&gt;. It speeds up the transition from monoliths to microservices and takes advantage of your existing industry standard Java EE technology experience.&lt;/p&gt; &lt;p&gt;&lt;span id="more-528527"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What’s in the box?&lt;/h2&gt; &lt;p&gt;This release is an incremental release from WildFly Swarm 7.1, and adds support for MicroProfile 1.3, a feature-rich collection of APIs for developing enterprise &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;. Beyond the core Java EE technologies like JAX-RS, CDI, and JSON-P, MicroProfile 1.3 includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-config"&gt;&lt;strong&gt;Config 1.2&lt;/strong&gt;&lt;/a&gt;: Externalizes configuration, separating business logic from service configuration. Service configurations developed with Thorntail 2.2 can be can read from &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/configmaps.html"&gt;OpenShift ConfigMaps&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-fault-tolerance"&gt;&lt;strong&gt;Fault Tolerance 1.0&lt;/strong&gt;&lt;/a&gt;: Implements a collection of programming patterns like Bulkheads, Timeouts, Circuit Breakers, and Fallbacks to monitor and gracefully react to potential failure conditions. Utilizing these patterns can eliminate the potential for cascading failures in a microservices architecture.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-metrics"&gt;&lt;strong&gt;Metrics 1.1&lt;/strong&gt;&lt;/a&gt;: Exposes a collection of common runtime metrics and custom application-defined metrics using constructs like Gauges, Counters, and Meters. Services developed with Thorntail 2.2 can be exposed to Prometheus monitoring on OpenShift.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-health"&gt;&lt;strong&gt;Health Check 1.0&lt;/strong&gt;&lt;/a&gt;: Standard endpoint that exposes a custom-developed service’s health to the underlying platform. When running on OpenShift, health check probes can monitor this endpoint and restart the containers running an unhealthy service.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-opentracing"&gt;&lt;strong&gt;OpenTracing 1.0&lt;/strong&gt;&lt;/a&gt;: Enables tracing the flow of a request as it traverses multiple services within a microservices architecture. When Thorntail is used with Jaeger (a distributed tracing service), organizations can quickly track down performance bottlenecks.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-open-api"&gt;&lt;strong&gt;Open API 1.0&lt;/strong&gt;&lt;/a&gt;: A Java implementation of the Open API specification that exposes machine-readable format of custom-developed RESTful endpoints.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-rest-client"&gt;&lt;strong&gt;Rest Client 1.0&lt;/strong&gt;&lt;/a&gt;: A type-safe API for invoking RESTful services.&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-jwt-auth"&gt;&lt;strong&gt;JWT RBAC 1.0&lt;/strong&gt;&lt;/a&gt;: Using OpenID Connect (OIDC)-based JSON Web Tokens (JWT) for role-based access control of microservices endpoints.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Thorntail also includes a number of features that make it easy to deploy and manage Thorntail projects, such as integrating data sources, support for &lt;a href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; and &lt;a href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat SSO&lt;/a&gt;, and more. Consult the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/red_hat_openshift_application_runtimes_release_notes/"&gt;release notes&lt;/a&gt; for a complete list.&lt;/p&gt; &lt;h2&gt;Besides the name, what else has changed?&lt;/h2&gt; &lt;p&gt;With the exception of the build configuration file (&lt;code&gt;pom.xml&lt;/code&gt;) and log output (more below), Thorntail is API-compatible with WildFly Swarm. The build configuration file will need to be updated with name of Thorntail artifacts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;org.wildfly.swarm&lt;/code&gt; references will need to be changed to &lt;code&gt;io.thorntail&lt;/code&gt;&lt;/li&gt; &lt;li&gt;If you&amp;#8217;re using the WildFly Swarm &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/thorntail_runtime_guide/#using-thorntail-maven-plugin_wf-swarm"&gt;Maven Plugin&lt;/a&gt;, you&amp;#8217;ll need to update the Maven &lt;code&gt;artifactId&lt;/code&gt; to &lt;code&gt;thorntail-maven-plugin&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This can be automated using a simple Maven command (run from your project&amp;#8217;s base directory):&lt;/p&gt; &lt;pre&gt;mvn io.thorntail:thorntail-maven-plugin:2.2.0.Final-redhat-00021:migrate-from-wildfly-swarm&lt;/pre&gt; &lt;p&gt;Be aware that the suffix used in the name of the generated &lt;em&gt;uberjar&lt;/em&gt; also changes to &lt;code&gt;-thorntail.jar&lt;/code&gt;. If you have CI/CD logic that depends on this suffix, you&amp;#8217;ll need to update to take this into account.&lt;/p&gt; &lt;p&gt;A few other notes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Because Thorntail is considered the “next dot release” of WildFly Swarm, there are new features available, most notably support for &lt;a href="https://github.com/eclipse/microprofile-bom/releases/tag/1.3"&gt;MicroProfile 1.3&lt;/a&gt; (see above)&lt;/li&gt; &lt;li&gt;With the rename to Thorntail, the version of Thorntail available with RHOAR will be identical to the upstream project version releases. This will make it easier for you to map versions of Thorntail to an upstream release.&lt;/li&gt; &lt;li&gt;Log message codes have changed from &lt;code&gt;WFSnnnnn&lt;/code&gt; or &lt;code&gt;WFSWARMnnnn&lt;/code&gt; to &lt;code&gt;THORNnnnnn&lt;/code&gt; or &lt;code&gt;TTnnnnn&lt;/code&gt;. Any monitoring of error codes will need to be updated.&lt;/li&gt; &lt;li&gt;And finally, Thorntail has a new logo you can see at the top of this post!&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Launch into OpenShift&lt;/h2&gt; &lt;div id="attachment_528577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="http://developers.redhat.com/launch"&gt;&lt;img class=" size-large wp-image-528577 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-10.51.04-AM-1024x473.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-10.51.04-AM-1024x473.png" alt="Thorntail featured in Launcher" width="640" height="296" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-10.51.04-AM-1024x473.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-10.51.04-AM-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-10.51.04-AM-768x355.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-10.51.04-AM.png 1416w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Thorntail featured in Launcher&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Using &lt;a href="https://developers.redhat.com/launch"&gt;developers.redhat.com/launch&lt;/a&gt; you can immediately create and deploy a Thorntail application directly to &lt;a href="http://openshift.com/"&gt;OpenShift Online&lt;/a&gt; or to your own local OpenShift cluster. It provides a hassle-free way of creating example applications, called boosters, as well as an easy way to build and deploy those boosters to OpenShift.&lt;/p&gt; &lt;p&gt;Boosters are available to showcase how developers can use Thorntail to build fundamental building blocks of cloud-native applications and services, such as creating secured RESTful APIs, implementing health checks, externalizing configuration, or integrating with the OpenShift Service Mesh based on the &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt; project.&lt;/p&gt; &lt;h2&gt;Test Driving a sample app&lt;/h2&gt; &lt;p&gt;Thorntail is a Java framework, and as such it can be run using &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;OpenJDK&lt;/a&gt;. Let&amp;#8217;s test drive one of the Thorntail boosters on OpenShift (here I am using the &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat CDK&lt;/a&gt;, but any OpenShift cluster will do). The following is one set of commands you could use to pull the OpenJDK image to your local system for use with Thorntail:&lt;/p&gt; &lt;pre&gt;oc new-project thorntail oc import-image java:8 --from=registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift --confirm&lt;/pre&gt; &lt;p&gt;Then, the following commands could be used to build and deploy the Thorntail application to Red Hat OpenShift:&lt;/p&gt; &lt;pre&gt;oc new-app --name rest-example 'java:8~https://github.com/thorntail-examples/rest-http-redhat#2.2.0-redhat-1' oc expose svc/rest-example&lt;/pre&gt; &lt;p&gt;You can watch the build take place:&lt;/p&gt; &lt;pre&gt;oc logs -f bc/rest-example&lt;/pre&gt; &lt;p&gt;Once the build completes, wait for the deployment to finish:&lt;/p&gt; &lt;pre&gt;oc rollout status -w dc/rest-example&lt;/pre&gt; &lt;p&gt;And then access the sample app&amp;#8217;s UI:&lt;/p&gt; &lt;pre&gt;open http://$(oc get route rest-example -o jsonpath='{.spec.host}{"\n"}')&lt;/pre&gt; &lt;p&gt;Red Hat Customers using the OpenJDK distribution with Thorntail will be able to keep current with the latest updates, security advisories, knowing when and why containers are updated, and remaining up-to-date on the latest available tagged image.&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;The RHOAR team has been continuously adding and improving on the official documentation for Thorntail. This includes updates in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/red_hat_openshift_application_runtimes_release_notes/"&gt;Release Notes&lt;/a&gt;, &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/getting_started_with_red_hat_openshift_application_runtimes/"&gt;Getting Started Guide,&lt;/a&gt; and the new &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/thorntail_runtime_guide/"&gt;Thorntail Runtime Guide&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Developer Interactive Learning Scenarios&lt;/h2&gt; &lt;p&gt;These &lt;a href="https://learn.openshift.com/middleware/rhoar-getting-started-thorntail/"&gt;self-paced scenarios&lt;/a&gt; provide you with a pre-configured OpenShift instance, accessible from your browser without any downloads or configuration. Use it to &lt;a href="https://learn.openshift.com/middleware/rhoar-getting-started-thorntail/"&gt;experiment with Thorntail&lt;/a&gt;, or learn about other technologies within RHOAR and see how its helps solve real-world problems.&lt;/p&gt; &lt;div id="attachment_528797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://learn.openshift.com/middleware/rhoar-getting-started-thorntail/"&gt;&lt;img class=" size-large wp-image-528797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-2.25.40-PM-1024x732.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-2.25.40-PM-1024x732.png" alt="Interactive Learning Scenario for Thorntail" width="640" height="458" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-2.25.40-PM-1024x732.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-2.25.40-PM-300x215.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-2.25.40-PM-768x549.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-17-at-2.25.40-PM.png 1271w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Interactive Learning Scenario for Thorntail&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Getting Support&lt;/h2&gt; &lt;p&gt;Support for Thorntail is available to Red Hat customers through a subscription to Red Hat OpenShift Application Runtimes. Contact your local Red Hat representative or &lt;a href="https://www.redhat.com/en/about/contact/sales"&gt;Red Hat Sales&lt;/a&gt; for details on how you can enjoy world-class support offered from Red Hat and its worldwide partner network.&lt;/p&gt; &lt;p&gt;Moving forward, customers can expect support for Thorntail and other RHOAR runtimes according to the &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes/"&gt;Red Hat Product Update and Support Lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;What’s Next?&lt;/h2&gt; &lt;p&gt;The Thorntail team is continually taking &lt;a href="https://issues.jboss.org/projects/THORN/issues?filter=allopenissues"&gt;feedback&lt;/a&gt; from customers and the wider community of open source developers, as well as tracking the &lt;a href="https://thorntail.io/downloads/"&gt;upstream Thorntail releases.&lt;/a&gt; They are working to make updates to the RHOAR runtimes based on that feedback, as well as considering support for additional modules from Red Hat and the very large Java community. The Thorntail community is also continuing to track the evolution of and contribute to &lt;a href="https://developers.redhat.com/blog/2018/04/24/jakarta-ee-is-officially-out/"&gt;Jakarta EE&lt;/a&gt; as well as the advances in the &lt;a href="https://microprofile.io"&gt;MicroProfile project&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Kudos!&lt;/h2&gt; &lt;p&gt;This release was produced by Red Hat’s RHOAR product team, and involved many hours of development, testing, writing documentation, testing some more, and working with the wider Red Hat community of customers, partners, and Thorntail developers to incorporate contributions, both big and small. We are glad you have chosen to use it, and hope that it meets or exceeds your expectations!&lt;/p&gt; &lt;h2&gt;More Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://developers.redhat.com/rhoar"&gt;Red Hat OpenShift Application Runtimes Developer home page&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/"&gt;Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://thorntail.io/archive/"&gt;Thorntail Blog&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/thorntail_runtime_guide/"&gt;Thorntail Runtime Guide&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/thorntail"&gt;Thorntail Discussion Group&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://twitter.com/thorntail_io"&gt;Thorntail on Twitter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://webchat.freenode.net/?channels=thorntail"&gt;Thorntail on IRC&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/projects/THORN/issues?filter=allopenissues"&gt;Thorntail Issue Tracker&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/07/microprofile-status-version-1-3/"&gt;MicroProfile Status in version 1.3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://microprofile.io"&gt;MicroProfile&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;linkname=Announcing%3A%20Thorntail%202.2%20General%20Availability" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fannouncing-thorntail-2-2-general-availability%2F&amp;#38;title=Announcing%3A%20Thorntail%202.2%20General%20Availability" data-a2a-url="https://developers.redhat.com/blog/2018/10/17/announcing-thorntail-2-2-general-availability/" data-a2a-title="Announcing: Thorntail 2.2 General Availability"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/10/17/announcing-thorntail-2-2-general-availability/"&gt;Announcing: Thorntail 2.2 General Availability&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3iULLfSedp0" height="1" width="1" alt=""/&gt;</content><summary>Summary Today Red Hat is making Thorntail 2.2 generally available to Red Hat customers through a subscription to Red Hat OpenShift Application Runtimes (RHOAR). RHOAR provides application developers with a variety of application runtimes running on the OpenShift Container Platform. Thorntail is the new name for WildFly Swarm, and bundles everything you need to develop and run Thorntail and MicroPr...</summary><dc:creator>James Falkner</dc:creator><dc:date>2018-10-17T19:25:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/10/17/announcing-thorntail-2-2-general-availability/</feedburner:origLink></entry><entry><title>Deploying MicroProfile apps on Microsoft Azure using the Azure Open Service Broker</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rQnYQZWQQWE/" /><category term="azure" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="mongodb" scheme="searchisko:content:tags" /><category term="Open Service Broker" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="thorntail" scheme="searchisko:content:tags" /><category term="wildfly swarm" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-deploying_microprofile_apps_on_microsoft_azure_using_the_azure_open_service_broker</id><updated>2018-10-17T18:00:28Z</updated><published>2018-10-17T18:00:28Z</published><content type="html">&lt;p&gt;At the recently concluded &lt;a href="https://www.redhat.com/en/events/red-hat-microsoft-ignite-2018"&gt;Microsoft Ignite 2018&lt;/a&gt; conference in Orlando, I had the honor of presenting to a crowd of Java developers and Azure professionals eager to learn how to put their Java skills to work building next-gen apps on Azure. Of course, that meant showcasing the technology coming out of the popular &lt;a href="https://microprofile.io"&gt;MicroProfile&lt;/a&gt; community, in which Red Hat plays a big part (and makes a fully supported, productized MicroProfile implementation through &lt;a href="https://thorntail.io"&gt;Thorntail&lt;/a&gt;, part of &lt;a href="https://developers.redhat.com/rhoar"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;We did a demo too, which is the main topic of this blog post, showing how easy it is to link your Java MicroProfile apps to Azure services through the &lt;a href="https://github.com/Azure/open-service-broker-azure"&gt;Open Service Broker for Azure&lt;/a&gt; (the open source, &lt;a href="https://www.openservicebrokerapi.org/" rel="nofollow"&gt;Open Service Broker&lt;/a&gt;-compatible API server that provisions managed services in the Microsoft Azure public cloud) and &lt;a href="https://github.com/openshift/service-catalog"&gt;OpenShift&amp;#8217;s Service Catalog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s how to reproduce the demo.&lt;/p&gt; &lt;p&gt;&lt;span id="more-524367"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Demo&lt;/h2&gt; &lt;p&gt;I was joined on stage by &lt;a href="https://twitter.com/cesar_saavedr"&gt;Cesar Saavedra&lt;/a&gt; from Red Hat (Technical Marketing for MicroProfile and Red Hat) and &lt;a href="http://twitter.com/bbenz"&gt;Brian Benz&lt;/a&gt; (Dev Advocate for Microsoft), and we introduced the MicroProfile origins, goals, community makeup, roadmap, and a few other items.&lt;/p&gt; &lt;p&gt;Then it was time for the demo. You can &lt;a href="https://www.youtube.com/watch?v=-nAjEsBjkLA"&gt;watch the video of the session&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/-nAjEsBjkLA?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;The demo application should look familiar to you:&lt;/p&gt; &lt;div id="attachment_524407" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-09-20-at-2.07.12-PM.png"&gt;&lt;img class="wp-image-524407 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-09-20-at-2.07.12-PM-1024x871.png" alt="MicroSweeper screenshot" width="640" height="544" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-09-20-at-2.07.12-PM-1024x871.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-09-20-at-2.07.12-PM-300x255.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-09-20-at-2.07.12-PM-768x653.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-09-20-at-2.07.12-PM.png 1502w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;MicroSweeper screenshot&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This game is the classic &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Minesweeper"&gt;Minesweeper&lt;/a&gt;, first introduced to the Windows world in 1992 with Windows 3.1, and much appreciated by the various graying heads in the audience (shout out to &lt;a href="http://www.nickarocho.com/"&gt;Nick Arocho&lt;/a&gt; for his awesome JavaScript implementation of the UI!).&lt;/p&gt; &lt;p&gt;To this game, I added a simple scoreboard backed by a database, and it was our job in the demo to hook this application up to Azure&amp;#8217;s &lt;a href="https://azure.microsoft.com/en-us/services/cosmos-db/"&gt;Cosmos DB&lt;/a&gt; service using the &lt;a href="https://github.com/eclipse/microprofile-config"&gt;MicroProfile Config API&lt;/a&gt;, as well integrate with OpenShift&amp;#8217;s &lt;a href="https://docs.okd.io/latest/dev_guide/application_health.html"&gt;health probes&lt;/a&gt; using the simple &lt;a href="https://github.com/eclipse/microprofile-health"&gt;MicroProfile Health APIs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The section below describes how to reproduce the demo.&lt;/p&gt; &lt;h2&gt;Re-creating the demo&lt;/h2&gt; &lt;p&gt;If you just want the source code, &lt;a href="https://github.com/jamesfalkner/microsweeper-demo"&gt;here it is&lt;/a&gt;, along with a &lt;em&gt;solution&lt;/em&gt; branch that adds the necessary changes to link the app to Cosmos DB and OpenShift. But if you want to play along, follow these steps:&lt;/p&gt; &lt;h3&gt;Step 1: Get an Azure account&lt;/h3&gt; &lt;p&gt;Our first job is to &lt;a href="https://azure.microsoft.com/en-us/free/"&gt;get an Azure account and some credits&lt;/a&gt;, all of which are free. Easy, right? Since we&amp;#8217;re using OpenShift, this could easily be deployed to the cloud of your choice, but Azure is super easy to use, and &lt;a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/redhat.openshift-container-platform?tab=Overview"&gt;OpenShift is available in the Azure Marketplace&lt;/a&gt; for production-ready multi-node OpenShift deployments. There&amp;#8217;s also a nice &lt;a href="https://access.redhat.com/documentation/en-us/reference_architectures/2018/html/deploying_and_managing_openshift_3.9_on_azure/index"&gt;Reference Architecture&lt;/a&gt; for all the architects out there.&lt;/p&gt; &lt;h3&gt;Step 2: Deploy OpenShift&lt;/h3&gt; &lt;p&gt;Since this is a demo, we can take shortcuts, right? In this case, we don&amp;#8217;t need the full power of a fully armed and operational and productized multi-node OpenShift deployment, so I used a nice &amp;#8220;All in One&amp;#8221; Azure deployment that Cesar created. To deploy this, simply &lt;a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fcealsair%2FMicroProfileOnAzure%2Fmaster%2Fallinone.json"&gt;click here&lt;/a&gt; (or click the &lt;strong&gt;Deploy to Azure&lt;/strong&gt; button below, which takes you to the Azure Portal along with a &lt;a href="https://github.com/cealsair/MicroProfileThorntailOnAzure/blob/master/allinone.json"&gt;payload&lt;/a&gt; that will deploy a single-node OpenShift instance to an Azure Resource Group of your choosing).&lt;/p&gt; &lt;p&gt;&lt;a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fcealsair%2FMicroProfileOnAzure%2Fmaster%2Fallinone.json"&gt;&lt;img class="alignnone" src="http://azuredeploy.net/deploybutton.png" alt="" width="161" height="34" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll need to fill out some information as part of the install. You&amp;#8217;ll use these values later, so don&amp;#8217;t forget them:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Resource Group&lt;/strong&gt;: Create a new Resource Group to house all of the components (VMs, NICs, storage, etc).  Resource Groups are the way Azure groups related resources together. If the named group does not exist, it&amp;#8217;ll be created for you.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: Pick one close to you to deploy.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Admin Username / Admin Password&lt;/strong&gt;: These will be the username and password you&amp;#8217;ll use to log in to the OpenShift Web Console.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Ssh Key Data&lt;/strong&gt;: You&amp;#8217;ll need to &lt;a href="https://docs.microsoft.com/en-us/azure/virtual-machines/linux/mac-create-ssh-keys"&gt;generate an SSH keypair&lt;/a&gt; if you want to use &lt;code&gt;ssh&lt;/code&gt; to access the resulting virtual machines.  Paste in the contents of the public key file once you&amp;#8217;ve created it.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Vm size&lt;/strong&gt;: Specify a VM size. A default value is provided. If another size or type of VM is required, ensure that the Location contains that instance type.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Agree to the terms and conditions, and click the &lt;strong&gt;Purchase&lt;/strong&gt; button. Then get a cup of coffee; it&amp;#8217;ll take around 15 minutes to complete and you&amp;#8217;ll start burning through your credits. (For the default machine type, you&amp;#8217;ll eat US$20 through US$30 per week!) Click the &lt;strong&gt;Deployment Progress&lt;/strong&gt; notification to watch the progress.&lt;/p&gt; &lt;p&gt;Once it is done, click on the &lt;strong&gt;Outputs&lt;/strong&gt; tab to reveal the URL to your new OpenShift console. Bookmark it, because you&amp;#8217;ll need it later. Also, don&amp;#8217;t forget the username/password you provided; you&amp;#8217;ll need those later too.&lt;/p&gt; &lt;p&gt;If you don&amp;#8217;t get any &lt;em&gt;outputs&lt;/em&gt;, you can always discover the public DNS hostname of your new OpenShift deployment by clicking on the &lt;strong&gt;Virtual Machines&lt;/strong&gt; link at the far left of the Azure Portal,  then click on the VM name (same name as the Resource Group you specified), then look for the &lt;em&gt;DNS Name&lt;/em&gt;, and open a new browser tab and navigate to &lt;code&gt;https://[THE_DNS_NAME]:8443&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Step 2a: Give yourself cluster-admin access&lt;/h3&gt; &lt;p&gt;Although a user in OpenShift was created using the credentials you supplied, this user does not have the &lt;code&gt;cluster-admin&lt;/code&gt; rights necessary for installing the service broker components. To give ourselves this ability, we need to use &lt;code&gt;ssh&lt;/code&gt; to access the machine and run a command (you &lt;i&gt;did&lt;/i&gt; save the SSH public and private key created earlier, right?).&lt;/p&gt; &lt;p&gt;First, log in to the VM running OpenShift:&lt;/p&gt; &lt;pre&gt;ssh -i [PRIVATE_KEY_PATH] [ADMIN_USERNAME]@[VM HOSTNAME] &lt;/pre&gt; &lt;p&gt;Where:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;[PRIVATE_KEY_PATH]&lt;/code&gt; is the path to the file containing the private key that corresponds to the public key you used when setting up OpenShift on Azure.&lt;/li&gt; &lt;li&gt;&lt;code&gt;[ADMIN_USERNAME]&lt;/code&gt; is the name of the OpenShift user you specified.&lt;/li&gt; &lt;li&gt;&lt;code&gt;[VM HOSTNAME]&lt;/code&gt; is the DNS hostname of the VM running on Azure.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once logged in via &lt;code&gt;ssh&lt;/code&gt;, run this command:&lt;/p&gt; &lt;pre&gt;sudo oc adm policy add-cluster-role-to-user cluster-admin [ADMIN_USERNAME]&lt;/pre&gt; &lt;p&gt;&lt;code&gt;[ADMIN_USERNAME]&lt;/code&gt; is the same as what you used in the &lt;code&gt;ssh&lt;/code&gt; command. This will give you the needed rights to install the service broker in the next steps. You can exit the &lt;code&gt;ssh&lt;/code&gt; session now.&lt;/p&gt; &lt;h3&gt;Step 3: Deploy the Azure Service Broker&lt;/h3&gt; &lt;p&gt;Out of the box, this all-in-one deployment of OpenShift includes support for the OpenShift Service Catalog (our implementation of the Open Service Broker API), so all that is left to do is install the &lt;a href="https://github.com/Azure/open-service-broker-azure"&gt;Open Service Broker for Azure&lt;/a&gt; to expose Azure services in the OpenShift Service Catalog.&lt;/p&gt; &lt;p&gt;This can most easily by installed using &lt;a href="https://www.helm.sh/"&gt;Helm&lt;/a&gt; (here are &lt;a href="https://docs.helm.sh/using_helm/#installing-helm"&gt;installation instructions&lt;/a&gt;), and with Helm you can also choose which version of the broker. Microsoft has &lt;a href="https://github.com/Azure/open-service-broker-azure/releases/tag/v1.0.0"&gt;temporarily taken out experimental services&lt;/a&gt; from the GA version of the broker, and is slowly adding them back in, so you&amp;#8217;ll need to specify a version from earlier this year that includes these experimental services like Cosmos DB&amp;#8217;s MongoDB API, which the demo uses.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s first log in as our admin user to our newly deployed OpenShift deployment using the &lt;code&gt;oc&lt;/code&gt; command (if you don&amp;#8217;t have this command, install the &lt;em&gt;client tools&lt;/em&gt; from &lt;a href="https://www.okd.io/download.html"&gt;here&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;oc login [URL] -u [ADMIN_USERNAME] -p [PASSWORD]&lt;/pre&gt; &lt;p&gt;Here, you need to specify the URL (including port number 8443) to your new OpenShift instance, as well as the username/password you used earlier when setting it up on Azure.&lt;/p&gt; &lt;p&gt;Once logged in, let&amp;#8217;s deploy the broker with Helm (note that this uses Helm 2.x and it&amp;#8217;s Tiller-full implementation).&lt;/p&gt; &lt;pre&gt;oc create -f https://raw.githubusercontent.com/Azure/helm-charts/master/docs/prerequisities/helm-rbac-config.yaml helm init --service-account tiller helm repo add azure https://kubernetescharts.blob.core.windows.net/azure&lt;/pre&gt; &lt;p&gt;With Helm set up and the Azure Helm Charts added, it&amp;#8217;s time to install the &lt;a href="https://github.com/Azure/open-service-broker-azure"&gt;Open Service Broker for Azure&lt;/a&gt;, but you&amp;#8217;ll need &lt;em&gt;four special values&lt;/em&gt; that will associate the broker with your personal Azure account through what&amp;#8217;s called a &lt;em&gt;service principal&lt;/em&gt;. Service principals are entities that have an identity and permissions to create and edit resources on an application&amp;#8217;s behalf. &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-service-principal-portal"&gt;You&amp;#8217;ll need to first create a service principal following the instructions here&lt;/a&gt;, and while creating it and assigning it permissions to your new Resource Group, collect the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;AZURE_SUBSCRIPTION_ID&lt;/strong&gt;: This is associated with your Azure account and can be found on the &lt;a href="https://portal.azure.com"&gt;Azure Portal&lt;/a&gt; (after logging in) by clicking on &lt;strong&gt;Resource Groups&lt;/strong&gt; and then on the name of the resource group created when you deployed OpenShift using the All-In-One deployment. Example: &lt;code&gt;6ac2eb01-3342-4727-9dfa-48f54bba9726&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;AZURE_TENANT_ID&lt;/strong&gt;: When creating the service principal, you&amp;#8217;ll see a reference to a &lt;em&gt;Tenant ID&lt;/em&gt;, also called a &lt;em&gt;Directory ID&lt;/em&gt;. It will also look something like a subscription ID, but they are different! It is associated with the Active Directory instance you have in your account.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;AZURE_CLIENT_ID&lt;/strong&gt;: The ID of the client (application) you create when creating a service principal, sometimes called an &lt;em&gt;application ID&lt;/em&gt;, also similar in structure to the above IDs but different!&lt;/li&gt; &lt;li&gt;&lt;strong&gt;AZURE_CLIENT_SECRET&lt;/strong&gt;: The secret value for the client (application) you create when creating a service principal. This will be a long-ish base64-encoded string.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Wow, that was fun. With these values, we can now issue the magic &lt;code&gt;helm&lt;/code&gt; command to do the tasks and install the Open Service Broker for Azure:&lt;/p&gt; &lt;pre&gt;helm install azure/open-service-broker-azure --name osba --namespace osba \ --version 0.11.0 \ --set azure.subscriptionId=[AZURE_SUBSCRIPTION_ID] \ --set azure.tenantId=[AZURE_TENANT_ID] \ --set azure.clientId=[AZURE_CLIENT_ID] \ --set azure.clientSecret=[AZURE_CLIENT_SECRET] \ --set modules.minStability=EXPERIMENTAL&lt;/pre&gt; &lt;p&gt;Unfortunately, this uses an ancient version of Redis, so let&amp;#8217;s use a more recent version and, to simplify things, let&amp;#8217;s remove the need for persistent volumes (and never use this in production!):&lt;/p&gt; &lt;pre&gt;oc volume -n osba deployment/osba-redis --remove --name=redis-data oc patch -n osba deployment/osba-redis -p '{"spec": {"template": {"spec": {"containers":[{"name": "osba-redis", "image": "bitnami/redis:4.0.9"}]}}}}'&lt;/pre&gt; &lt;p&gt;This will install the Open Service Broker for Azure in the &lt;code&gt;osba&lt;/code&gt; Kubernetes namespace and enable the experimental features (like Cosmos DB).  It may take some time to pull the images for the broker and for Redis (the default database it uses), and the broker pod might enter a crash loop while it tries to access Redis, but eventually, it should come up. If you screw it up and get errors, you can start over by deleting the &lt;code&gt;osba&lt;/code&gt; namespace and trying again (using &lt;code&gt;helm del --purge osba; oc delete project osba&lt;/code&gt; and waiting a while until it&amp;#8217;s really gone and does not appear in &lt;code&gt;oc get projects&lt;/code&gt; output).&lt;/p&gt; &lt;p&gt;Run this command to verify everything is working:&lt;/p&gt; &lt;pre&gt;oc get pods -n osba&lt;/pre&gt; &lt;p&gt;You should see the following (look for the &lt;em&gt;Running&lt;/em&gt; status for both):&lt;/p&gt; &lt;pre&gt;NAME READY STATUS RESTARTS AGE osba-open-service-broker-azure-846688c998-p86bv 1/1 Running 4 1h osba-redis-5c7f85fcdf-s9xqk 1/1 Running 0 1h &lt;/pre&gt; &lt;p&gt;Now that it&amp;#8217;s installed, browse to the OpenShift Web Console (the URL can be discovered by running &lt;code&gt;oc status&lt;/code&gt;). Log in using the same credentials as before, and you should see a number of services and their icons for Azure services (it might take a minute or two for OpenShift to poll the broker and discover all it has to offer):&lt;/p&gt; &lt;div id="attachment_527067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/osb.png"&gt;&lt;img class="wp-image-527067 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/osb-1024x799.png" alt="Azure Services exposed through Open Service Broker in OpenShift" width="640" height="499" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/osb-1024x799.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/osb-300x234.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/osb-768x599.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Azure Services exposed through Open Service Broker in OpenShift&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Type &lt;code&gt;azure&lt;/code&gt; into the search box at the top to see a list. Woo! Easy, peasy.&lt;/p&gt; &lt;h3&gt;Step 4: Deploy Cosmos DB&lt;/h3&gt; &lt;p&gt;Before we deploy the app, let&amp;#8217;s deploy the database we&amp;#8217;ll use. (In the demo, I started without a database and did some live coding to deploy the database and change the app to use it. For this blog post, I&amp;#8217;ll assume you just want to run the final code.)&lt;/p&gt; &lt;p&gt;To deploy Cosmos DB, we&amp;#8217;ll use the OpenShift Web Console. On the main screen, double-click on the &lt;strong&gt;Azure Cosmos DB (MongoDB API) &lt;/strong&gt;icon. This will walk you through a couple of screens. Click &lt;strong&gt;Next&lt;/strong&gt; on the first screen. On the second screen, elect to deploy Cosmos DB to a new project, and name the project &lt;code&gt;microsweeper&lt;/code&gt;. Below that, you can keep all the default settings, except for the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Set &lt;strong&gt;defaultConsistencyLevel&lt;/strong&gt; to &lt;strong&gt;Session&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Type &lt;code&gt;0.0.0.0/0&lt;/code&gt; in the first &lt;strong&gt;allowedIPRanges&lt;/strong&gt; box, and click the &lt;strong&gt;Add&lt;/strong&gt; button. Then click the &lt;strong&gt;X&lt;/strong&gt; button next to the second &lt;strong&gt;allowedIPRanges&lt;/strong&gt; box (don&amp;#8217;t ask why).&lt;/li&gt; &lt;li&gt;Enter a valid Azure region identifier in the &lt;strong&gt;location&lt;/strong&gt; box, for example, &lt;code&gt;eastus&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;resourceGroup&lt;/strong&gt; box, enter the name of the ResourceGroup you previously created in step 2.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;On the final screen, choose the&lt;strong&gt; Create a secret in microsweeper to be used later&lt;/strong&gt; option. This will later be referenced from the app. Finally, click the &lt;strong&gt;Create&lt;/strong&gt; button and then OpenShift will do its thing, which will take about 5–10 minutes.&lt;/p&gt; &lt;p&gt;Click &lt;strong&gt;Continue to the project overview&lt;/strong&gt; to see the status of the Azure service. During this time, if you visit the Azure Portal in a separate tab, you&amp;#8217;ll see several resources being created (most notably a Cosmos DB instance). Once it&amp;#8217;s all done, the Provisioned Services section of the OpenShift Console&amp;#8217;s Project Overview screen will show that Cosmos DB is ready for use, including a binding that we&amp;#8217;ll use later.&lt;/p&gt; &lt;div id="attachment_525167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.59.05-PM.png"&gt;&lt;img class="wp-image-525167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.59.05-PM-1024x510.png" alt="Cosmos DB is ready for use" width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.59.05-PM-1024x510.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.59.05-PM-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.59.05-PM-768x383.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.59.05-PM.png 1204w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Cosmos DB is ready for use&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 5: Add MicroProfile health checks and configuration&lt;/h3&gt; &lt;p&gt;The app is using two of the &lt;a href="https://microprofile.io/projects/"&gt;many MicroProfile APIs&lt;/a&gt;: &lt;a href="https://microprofile.io/project/eclipse/microprofile-health"&gt;&lt;code&gt;HealthCheck&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://microprofile.io/project/eclipse/microprofile-config"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;MicroProfile HealthCheck&lt;/h4&gt; &lt;p&gt;To the &lt;a href="https://github.com/jamesfalkner/microsweeper-demo/blob/master/src/main/java/com/example/microsweeper/rest/RestApplication.java"&gt;&lt;code&gt;RestApplication&lt;/code&gt;&lt;/a&gt; class, we&amp;#8217;ve added a simple &lt;code&gt;@Health&lt;/code&gt; annotation and a new method:&lt;/p&gt; &lt;pre&gt;@Health @ApplicationPath("/api") public class RestApplication extends Application implements HealthCheck { @Override public HealthCheckResponse call() { return HealthCheckResponse.named("successful-check").up().build(); } } &lt;/pre&gt; &lt;p&gt;Simple, right? You can add as many of these as you want, and the health check can do whatever it needs to do and be as complex as you want (but not too complex!).&lt;/p&gt; &lt;h4&gt;MicroProfile Config&lt;/h4&gt; &lt;p&gt;More interesting I think is the addition of the Cosmos DB configuration. Since we exposed Cosmos DB through environment variables, we&amp;#8217;re able to automatically inject their values using MicroProfile in the &lt;a href="https://github.com/jamesfalkner/microsweeper-demo/blob/master/src/main/java/com/example/microsweeper/service/ScoreboardServiceCosmos.java"&gt;&lt;code&gt;ScoreboardServiceCosmos&lt;/code&gt;&lt;/a&gt; class:&lt;/p&gt; &lt;pre&gt;@Inject @ConfigProperty(name = "SCORESDB_uri") private String uri; ... mongoClient = new MongoClient(new MongoClientURI(uri)); &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;@Inject @ConfigProperty&lt;/code&gt; MicroProfile annotations direct Thorntail to look for and dynamically inject values for the &lt;code&gt;uri&lt;/code&gt; field, based on the specified name. The MicroProfile &lt;code&gt;Config&lt;/code&gt; API specifies a well-defined precedence table to find these, so there are many ways to expose the values to your applications. We will use an environment variable in this demo, but you could also use properties files, &lt;a href="https://docs.okd.io/latest/dev_guide/configmaps.html"&gt;ConfigMaps&lt;/a&gt;, etc.&lt;/p&gt; &lt;h3&gt;Step 6: Deploy the App&lt;/h3&gt; &lt;p&gt;The sample app uses &lt;a href="https://thorntail.io"&gt;Thorntail&lt;/a&gt;, Red Hat&amp;#8217;s fully supported &lt;a href="https://microprofile.io"&gt;MicroProfile&lt;/a&gt; implementation. This is a Java framework, so you&amp;#8217;ll first need to install &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;Red Hat&amp;#8217;s OpenJDK&lt;/a&gt; to OpenShift so it can be used to build and run the app:&lt;/p&gt; &lt;pre&gt;oc create -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/a1ea009fac7adf0ca34f8ab7dbe5aa0468fe5246/openjdk/openjdk18-image-stream.json&lt;/pre&gt; &lt;p&gt;This uses a previous version of the image stream that references &lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Next, let&amp;#8217;s deploy the app to our newly created project:&lt;/p&gt; &lt;pre&gt;oc new-project microsweeper oc new-app 'redhat-openjdk18-openshift:1.3~https://github.com/jamesfalkner/microsweeper-demo#solution' \ -e GC_MAX_METASPACE_SIZE=500 \ -e ENVIRONMENT=DEVELOPMENT oc expose svc/microsweeper-demo &lt;/pre&gt; &lt;p&gt;This will create a new &lt;a href="https://docs.okd.io/latest/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;S2I-based build&lt;/a&gt; for the app, build it with Maven and OpenJDK, and deploy the app. Initially, the app will be using an internal database (H2). It may take a few minutes to deploy. When it&amp;#8217;s done, you should see the following output:&lt;/p&gt; &lt;pre&gt;% oc get pods -n microsweeper NAME READY STATUS RESTARTS AGE microsweeper-demo-1-build 0/1 Completed 0 1h microsweeper-demo-3-x8bdg 1/1 Running 0 1h &lt;/pre&gt; &lt;p&gt;You can see the completed build pod that built the app and the running app pod.&lt;/p&gt; &lt;div id="attachment_525077" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/azure.png"&gt;&lt;img class="wp-image-525077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/azure-1024x609.png" alt="MicroProfile app deployed to OpenShift" width="640" height="381" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/azure-1024x609.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/azure-300x179.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/azure-768x457.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/azure.png 1163w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;MicroProfile app deployed to OpenShift&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once deployed, you can click on the Route URL in the OpenShift Web Console next to the &lt;code&gt;microsweeper-demo&lt;/code&gt; service and play the game. You can also get the URL with this:&lt;/p&gt; &lt;pre&gt;echo http://$(oc get route microsweeper-demo -o jsonpath='{.spec.host}{"\n"}' -n microsweeper)&lt;/pre&gt; &lt;p&gt;Note that it is not yet using MicroProfile or Cosmos DB yet! In the game, enter your name (or use the default), and play the game a few times, ensuring that the scoreboard is updated when you win or lose. To reset the scoreboard, click the X in the upper right. To start the game again, click the smiley or sad face. Good times, right? Let&amp;#8217;s hook it up to Cosmos DB!&lt;/p&gt; &lt;h3&gt;Step 7: Bind Cosmos DB to the app&lt;/h3&gt; &lt;p&gt;In a previous step, you deployed the Cosmos DB service to your project, so it is now said to be &amp;#8220;provisioned&amp;#8221; and bound to the project. You could at this point hard-code the app logic to use the provisioned service&amp;#8217;s URI, username, password, etc., but that&amp;#8217;s a terrible long-term approach. It&amp;#8217;s better to expose the service&amp;#8217;s credentials dynamically using OpenShift and then change the app to use the values through that dynamic mechanism.&lt;/p&gt; &lt;p&gt;There are two easy ways to expose the service&amp;#8217;s configuration: through &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Kubernetes Secrets&lt;/a&gt; (where the credentials are exposed through an ordinary file on the filesystem securely transmitted and mounted via a volume in the pod) or through environment variables. I used environment variables because it&amp;#8217;s easy, but Thorntail/MicroProfile can use either.&lt;/p&gt; &lt;p&gt;First, click on &lt;strong&gt;View Secret&lt;/strong&gt; to view the contents of the secrets we need to bind to Cosmos DB, and then click on &lt;strong&gt;Add to Application&lt;/strong&gt;. This will allow you to choose for which application to add the environment variables to the DeploymentConfig for the application. Select the &lt;code&gt;microsweeper-demo&lt;/code&gt; application in the drop-down, and then select the &lt;strong&gt;Environment variables&lt;/strong&gt; option and specify a prefix of &lt;code&gt;SCORESDB_&lt;/code&gt;. (Don&amp;#8217;t forget the underscore!) This will alter the environment of the application once it is re-deployed to add the new environment variables, each of which will start with &lt;code&gt;SCORESDB_&lt;/code&gt; (for example, the URI to the Cosmos DB will be the value of the &lt;code&gt;SCORESDB_uri&lt;/code&gt; environment variable).&lt;/p&gt; &lt;div id="attachment_525087" style="width: 648px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-4.45.14-PM.png"&gt;&lt;img class="wp-image-525087 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-4.45.14-PM.png" alt="Values to use when adding secrets to the app" width="638" height="349" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-4.45.14-PM.png 638w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-4.45.14-PM-300x164.png 300w" sizes="(max-width: 638px) 100vw, 638px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Values to use when adding secrets to the app&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Now we&amp;#8217;re ready to switch to Cosmos DB. To do this switch, simply change the value of the &lt;code&gt;ENVIRONMENT&lt;/code&gt; environment variable to switch from the H2 database to Cosmos DB within the app:&lt;/p&gt; &lt;pre&gt;oc set env dc/microsweeper-demo ENVIRONMENT=PRODUCTION --overwrite&lt;/pre&gt; &lt;p&gt;At this point, the app will be re-deployed and start using Cosmos DB! Play the game a few more times, and then head over to the Azure Portal to verify data is being correctly persisted. Navigate to Azure Cosmos DB in the portal, and then click on the single long string that represents the ID of the database. You should see a single collection called &lt;em&gt;ScoresCollection&lt;/em&gt;:&lt;/p&gt; &lt;div id="attachment_525097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.00.10-PM.png"&gt;&lt;img class="wp-image-525097 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.00.10-PM-1024x583.png" alt="A collection called ScoresCollection" width="640" height="364" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.00.10-PM-1024x583.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.00.10-PM-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.00.10-PM-768x437.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.00.10-PM.png 1580w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;A collection called ScoresCollection&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click on &lt;strong&gt;ScoresCollection&lt;/strong&gt; and then on &lt;strong&gt;Data Explorer&lt;/strong&gt;. This tool lets you see the data records (documents) in the database.  Using the small &amp;#8220;&lt;strong&gt;&amp;#8230;&lt;/strong&gt;&amp;#8221; menu next to the name of the collection, click on &lt;strong&gt;New Query&lt;/strong&gt;:&lt;/p&gt; &lt;div id="attachment_525107" style="width: 430px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.32.44-PM.png"&gt;&lt;img class="wp-image-525107 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.32.44-PM.png" alt="Selecting the New Query menu item" width="420" height="303" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.32.44-PM.png 420w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.32.44-PM-300x216.png 300w" sizes="(max-width: 420px) 100vw, 420px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Selecting the New Query menu item&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Type the simplest of queries into the Query box: &lt;code&gt;{}&lt;/code&gt;. Then click &lt;strong&gt;Execute Query&lt;/strong&gt; to see the results. Play the game a few more times, and re-issue the query to confirm data is being persisted properly. Well done!&lt;/p&gt; &lt;div id="attachment_525117" style="width: 927px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.33.00-PM.png"&gt;&lt;img class="wp-image-525117 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.33.00-PM.png" alt="Confirming data is being persisted properly" width="917" height="440" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.33.00-PM.png 917w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.33.00-PM-300x144.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/Screen-Shot-2018-10-05-at-5.33.00-PM-768x369.png 768w" sizes="(max-width: 917px) 100vw, 917px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Confirming data is being persisted properly&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Next Steps&lt;/h3&gt; &lt;p&gt;In this demo, we used two of the MicroProfile APIs that are instrumental in developing Java microservices (&lt;code&gt;HealthCheck&lt;/code&gt; and &lt;code&gt;Config&lt;/code&gt;) to link the MicroProfile/Thorntail application to Azure services through the Open Service Broker API.&lt;/p&gt; &lt;p&gt;There are many other MicroProfile APIs you can use, and I encourage you to check out the &lt;a href="https://microprofile.io/projects/"&gt;full specifications&lt;/a&gt; and the recent release (MicroProfile 2.1). MicroProfile is awesome and is a great way to build Java microservices using truly open, community-driven innovation.&lt;/p&gt; &lt;p&gt;Also see these posts on &lt;a href="https://developers.redhat.com/blog/category/modern-app-dev/"&gt;modern application development&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/blog/category/java/"&gt;Java&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Happy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;linkname=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F10%2F17%2Fmicroprofile-apps-azure-open-service-broker%2F&amp;#38;title=Deploying%20MicroProfile%20apps%20on%20Microsoft%20Azure%20using%20the%20Azure%20Open%20Service%20Broker" data-a2a-url="https://developers.redhat.com/blog/2018/10/17/microprofile-apps-azure-open-service-broker/" data-a2a-title="Deploying MicroProfile apps on Microsoft Azure using the Azure Open Service Broker"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/10/17/microprofile-apps-azure-open-service-broker/"&gt;Deploying MicroProfile apps on Microsoft Azure using the Azure Open Service Broker&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rQnYQZWQQWE" height="1" width="1" alt=""/&gt;</content><summary>At the recently concluded Microsoft Ignite 2018 conference in Orlando, I had the honor of presenting to a crowd of Java developers and Azure professionals eager to learn how to put their Java skills to work building next-gen apps on Azure. Of course, that meant showcasing the technology coming out of the popular MicroProfile community, in which Red Hat plays a big part (and makes a fully supported...</summary><dc:creator>James Falkner</dc:creator><dc:date>2018-10-17T18:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/10/17/microprofile-apps-azure-open-service-broker/</feedburner:origLink></entry></feed>
